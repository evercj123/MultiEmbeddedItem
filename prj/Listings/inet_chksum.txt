; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\inet_chksum.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\inet_chksum.d --cpu=Cortex-M3 --apcs=interwork --diag_suppress=9931 -I..\app -I..\board -I..\cmsis -I..\lwip\src -I..\lwip\src\api -I..\lwip\src\arch -I..\lwip\src\core -I..\lwip\src\core\snmp -I..\lwip\src\include -I..\lwip\src\include\lwip -I..\lwip\src\include\ipv4 -I..\lwip\src\include\ipv4\lwip -I..\lwip\src\include\posix -I..\lwip\src\include\posix\sys -I..\lwip\src\netif -I..\lwip\src\netif\ppp -I..\stm_lib\inc -I..\stm_lib\src -I.\RTE\_lwip -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=523 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\inet_chksum.crf ..\lwip\src\core\ipv4\inet_chksum.c]
                          THUMB

                          AREA ||i.inet_chksum||, CODE, READONLY, ALIGN=1

                  inet_chksum PROC
;;;395    u16_t
;;;396    inet_chksum(void *dataptr, u16_t len)
000000  b510              PUSH     {r4,lr}
;;;397    {
;;;398      return ~LWIP_CHKSUM(dataptr, len);
000002  f7fffffe          BL       lwip_standard_chksum
000006  43c0              MVNS     r0,r0
000008  b280              UXTH     r0,r0
;;;399    }
00000a  bd10              POP      {r4,pc}
;;;400    
                          ENDP


                          AREA ||i.inet_chksum_pbuf||, CODE, READONLY, ALIGN=1

                  inet_chksum_pbuf PROC
;;;408    u16_t
;;;409    inet_chksum_pbuf(struct pbuf *p)
000000  b570              PUSH     {r4-r6,lr}
;;;410    {
;;;411      u32_t acc;
;;;412      struct pbuf *q;
;;;413      u8_t swapped;
;;;414    
;;;415      acc = 0;
000002  2400              MOVS     r4,#0
000004  4605              MOV      r5,r0                 ;410
;;;416      swapped = 0;
000006  4626              MOV      r6,r4
000008  e013              B        |L2.50|
                  |L2.10|
;;;417      for(q = p; q != NULL; q = q->next) {
;;;418        acc += LWIP_CHKSUM(q->payload, q->len);
00000a  8969              LDRH     r1,[r5,#0xa]
00000c  6868              LDR      r0,[r5,#4]
00000e  f7fffffe          BL       lwip_standard_chksum
000012  4420              ADD      r0,r0,r4
;;;419        acc = FOLD_U32T(acc);
000014  b281              UXTH     r1,r0
000016  eb014410          ADD      r4,r1,r0,LSR #16
;;;420        if (q->len % 2 != 0) {
00001a  7aa8              LDRB     r0,[r5,#0xa]
00001c  07c0              LSLS     r0,r0,#31
00001e  d007              BEQ      |L2.48|
;;;421          swapped = 1 - swapped;
000020  f1c60001          RSB      r0,r6,#1
000024  b2c6              UXTB     r6,r0
;;;422          acc = SWAP_BYTES_IN_WORD(acc);
000026  b2e0              UXTB     r0,r4
000028  f3c42107          UBFX     r1,r4,#8,#8
00002c  ea412400          ORR      r4,r1,r0,LSL #8
                  |L2.48|
000030  682d              LDR      r5,[r5,#0]            ;417
                  |L2.50|
000032  2d00              CMP      r5,#0                 ;417
000034  d1e9              BNE      |L2.10|
;;;423        }
;;;424      }
;;;425    
;;;426      if (swapped) {
000036  b126              CBZ      r6,|L2.66|
;;;427        acc = SWAP_BYTES_IN_WORD(acc);
000038  b2e0              UXTB     r0,r4
00003a  f3c42107          UBFX     r1,r4,#8,#8
00003e  ea412400          ORR      r4,r1,r0,LSL #8
                  |L2.66|
;;;428      }
;;;429      return (u16_t)~(acc & 0xffffUL);
000042  43e0              MVNS     r0,r4
000044  b280              UXTH     r0,r0
;;;430    }
000046  bd70              POP      {r4-r6,pc}
;;;431    
                          ENDP


                          AREA ||i.inet_chksum_pseudo||, CODE, READONLY, ALIGN=1

                  inet_chksum_pseudo PROC
;;;271    u16_t
;;;272    inet_chksum_pseudo(struct pbuf *p,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;273           ip_addr_t *src, ip_addr_t *dest,
;;;274           u8_t proto, u16_t proto_len)
;;;275    {
;;;276      u32_t acc;
;;;277      u32_t addr;
;;;278      struct pbuf *q;
;;;279      u8_t swapped;
;;;280    
;;;281      acc = 0;
000004  2400              MOVS     r4,#0
000006  4699              MOV      r9,r3                 ;275
000008  4617              MOV      r7,r2                 ;275
00000a  4688              MOV      r8,r1                 ;275
00000c  4605              MOV      r5,r0                 ;275
;;;282      swapped = 0;
00000e  4626              MOV      r6,r4
000010  f8dda020          LDR      r10,[sp,#0x20]        ;275
000014  e013              B        |L3.62|
                  |L3.22|
;;;283      /* iterate through all pbuf in chain */
;;;284      for(q = p; q != NULL; q = q->next) {
;;;285        LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
;;;286          (void *)q, (void *)q->next));
;;;287        acc += LWIP_CHKSUM(q->payload, q->len);
000016  8969              LDRH     r1,[r5,#0xa]
000018  6868              LDR      r0,[r5,#4]
00001a  f7fffffe          BL       lwip_standard_chksum
00001e  4420              ADD      r0,r0,r4
;;;288        /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
;;;289        /* just executing this next line is probably faster that the if statement needed
;;;290           to check whether we really need to execute it, and does no harm */
;;;291        acc = FOLD_U32T(acc);
000020  b281              UXTH     r1,r0
000022  eb014410          ADD      r4,r1,r0,LSR #16
;;;292        if (q->len % 2 != 0) {
000026  7aa8              LDRB     r0,[r5,#0xa]
000028  07c0              LSLS     r0,r0,#31
00002a  d007              BEQ      |L3.60|
;;;293          swapped = 1 - swapped;
00002c  f1c60001          RSB      r0,r6,#1
000030  b2c6              UXTB     r6,r0
;;;294          acc = SWAP_BYTES_IN_WORD(acc);
000032  b2e0              UXTB     r0,r4
000034  f3c42107          UBFX     r1,r4,#8,#8
000038  ea412400          ORR      r4,r1,r0,LSL #8
                  |L3.60|
00003c  682d              LDR      r5,[r5,#0]            ;284
                  |L3.62|
00003e  2d00              CMP      r5,#0                 ;284
000040  d1e9              BNE      |L3.22|
;;;295        }
;;;296        /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
;;;297      }
;;;298    
;;;299      if (swapped) {
000042  b126              CBZ      r6,|L3.78|
;;;300        acc = SWAP_BYTES_IN_WORD(acc);
000044  b2e0              UXTB     r0,r4
000046  f3c42107          UBFX     r1,r4,#8,#8
00004a  ea412400          ORR      r4,r1,r0,LSL #8
                  |L3.78|
;;;301      }
;;;302      addr = ip4_addr_get_u32(src);
;;;303      acc += (addr & 0xffffUL);
00004e  f8d80000          LDR      r0,[r8,#0]
000052  b281              UXTH     r1,r0
000054  4421              ADD      r1,r1,r4
;;;304      acc += ((addr >> 16) & 0xffffUL);
000056  eb014110          ADD      r1,r1,r0,LSR #16
;;;305      addr = ip4_addr_get_u32(dest);
;;;306      acc += (addr & 0xffffUL);
00005a  6838              LDR      r0,[r7,#0]
00005c  b282              UXTH     r2,r0
00005e  4411              ADD      r1,r1,r2
;;;307      acc += ((addr >> 16) & 0xffffUL);
000060  eb014410          ADD      r4,r1,r0,LSR #16
;;;308      acc += (u32_t)htons((u16_t)proto);
000064  4648              MOV      r0,r9
000066  f7fffffe          BL       lwip_htons
00006a  4404              ADD      r4,r4,r0
;;;309      acc += (u32_t)htons(proto_len);
00006c  4650              MOV      r0,r10
00006e  f7fffffe          BL       lwip_htons
000072  4420              ADD      r0,r0,r4
;;;310    
;;;311      /* Fold 32-bit sum to 16 bits
;;;312         calling this twice is propably faster than if statements... */
;;;313      acc = FOLD_U32T(acc);
000074  b281              UXTH     r1,r0
000076  eb014010          ADD      r0,r1,r0,LSR #16
;;;314      acc = FOLD_U32T(acc);
00007a  eb004010          ADD      r0,r0,r0,LSR #16
;;;315      LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
;;;316      return (u16_t)~(acc & 0xffffUL);
00007e  43c0              MVNS     r0,r0
000080  b280              UXTH     r0,r0
;;;317    }
000082  e8bd87f0          POP      {r4-r10,pc}
;;;318    
                          ENDP


                          AREA ||i.inet_chksum_pseudo_partial||, CODE, READONLY, ALIGN=2

                  inet_chksum_pseudo_partial PROC
;;;331    u16_t
;;;332    inet_chksum_pseudo_partial(struct pbuf *p,
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;333           ip_addr_t *src, ip_addr_t *dest,
;;;334           u8_t proto, u16_t proto_len, u16_t chksum_len)
;;;335    {
;;;336      u32_t acc;
;;;337      u32_t addr;
;;;338      struct pbuf *q;
;;;339      u8_t swapped;
;;;340      u16_t chklen;
;;;341    
;;;342      acc = 0;
000004  2400              MOVS     r4,#0
000006  469b              MOV      r11,r3                ;335
000008  4692              MOV      r10,r2                ;335
00000a  4689              MOV      r9,r1                 ;335
00000c  4605              MOV      r5,r0                 ;335
;;;343      swapped = 0;
00000e  46a0              MOV      r8,r4
000010  9e0b              LDR      r6,[sp,#0x2c]         ;335
000012  e022              B        |L4.90|
                  |L4.20|
;;;344      /* iterate through all pbuf in chain */
;;;345      for(q = p; (q != NULL) && (chksum_len > 0); q = q->next) {
;;;346        LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
;;;347          (void *)q, (void *)q->next));
;;;348        chklen = q->len;
000014  896f              LDRH     r7,[r5,#0xa]
;;;349        if (chklen > chksum_len) {
000016  42b7              CMP      r7,r6
000018  d900              BLS      |L4.28|
;;;350          chklen = chksum_len;
00001a  4637              MOV      r7,r6
                  |L4.28|
;;;351        }
;;;352        acc += LWIP_CHKSUM(q->payload, chklen);
00001c  4639              MOV      r1,r7
00001e  6868              LDR      r0,[r5,#4]
000020  f7fffffe          BL       lwip_standard_chksum
;;;353        chksum_len -= chklen;
000024  1bf1              SUBS     r1,r6,r7
000026  b28e              UXTH     r6,r1
;;;354        LWIP_ASSERT("delete me", chksum_len < 0x7fff);
000028  f64771ff          MOV      r1,#0x7fff
00002c  4420              ADD      r0,r0,r4              ;352
00002e  428e              CMP      r6,r1
000030  d303              BCC      |L4.58|
000032  a01e              ADR      r0,|L4.172|
000034  f7fffffe          BL       __2printf
                  |L4.56|
000038  e7fe              B        |L4.56|
                  |L4.58|
;;;355        /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
;;;356        /* fold the upper bit down */
;;;357        acc = FOLD_U32T(acc);
00003a  b281              UXTH     r1,r0
00003c  eb014410          ADD      r4,r1,r0,LSR #16
;;;358        if (q->len % 2 != 0) {
000040  7aa8              LDRB     r0,[r5,#0xa]
000042  07c0              LSLS     r0,r0,#31
000044  d008              BEQ      |L4.88|
;;;359          swapped = 1 - swapped;
000046  f1c80001          RSB      r0,r8,#1
00004a  f00008ff          AND      r8,r0,#0xff
;;;360          acc = SWAP_BYTES_IN_WORD(acc);
00004e  b2e0              UXTB     r0,r4
000050  f3c42107          UBFX     r1,r4,#8,#8
000054  ea412400          ORR      r4,r1,r0,LSL #8
                  |L4.88|
000058  682d              LDR      r5,[r5,#0]            ;345
                  |L4.90|
00005a  b10d              CBZ      r5,|L4.96|
00005c  2e00              CMP      r6,#0                 ;345
00005e  d1d9              BNE      |L4.20|
                  |L4.96|
;;;361        }
;;;362        /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
;;;363      }
;;;364    
;;;365      if (swapped) {
000060  f1b80f00          CMP      r8,#0
000064  d004              BEQ      |L4.112|
;;;366        acc = SWAP_BYTES_IN_WORD(acc);
000066  b2e0              UXTB     r0,r4
000068  f3c42107          UBFX     r1,r4,#8,#8
00006c  ea412400          ORR      r4,r1,r0,LSL #8
                  |L4.112|
;;;367      }
;;;368      addr = ip4_addr_get_u32(src);
;;;369      acc += (addr & 0xffffUL);
000070  f8d90000          LDR      r0,[r9,#0]
000074  b281              UXTH     r1,r0
000076  4421              ADD      r1,r1,r4
;;;370      acc += ((addr >> 16) & 0xffffUL);
000078  eb014110          ADD      r1,r1,r0,LSR #16
;;;371      addr = ip4_addr_get_u32(dest);
;;;372      acc += (addr & 0xffffUL);
00007c  f8da0000          LDR      r0,[r10,#0]
000080  b282              UXTH     r2,r0
000082  4411              ADD      r1,r1,r2
;;;373      acc += ((addr >> 16) & 0xffffUL);
000084  eb014410          ADD      r4,r1,r0,LSR #16
;;;374      acc += (u32_t)htons((u16_t)proto);
000088  4658              MOV      r0,r11
00008a  f7fffffe          BL       lwip_htons
00008e  4404              ADD      r4,r4,r0
;;;375      acc += (u32_t)htons(proto_len);
000090  980a              LDR      r0,[sp,#0x28]
000092  f7fffffe          BL       lwip_htons
000096  4420              ADD      r0,r0,r4
;;;376    
;;;377      /* Fold 32-bit sum to 16 bits
;;;378         calling this twice is propably faster than if statements... */
;;;379      acc = FOLD_U32T(acc);
000098  b281              UXTH     r1,r0
00009a  eb014010          ADD      r0,r1,r0,LSR #16
;;;380      acc = FOLD_U32T(acc);
00009e  eb004010          ADD      r0,r0,r0,LSR #16
;;;381      LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
;;;382      return (u16_t)~(acc & 0xffffUL);
0000a2  43c0              MVNS     r0,r0
0000a4  b280              UXTH     r0,r0
;;;383    }
0000a6  e8bd9ff0          POP      {r4-r12,pc}
;;;384    
                          ENDP

0000aa  0000              DCW      0x0000
                  |L4.172|
0000ac  64656c65          DCB      "delete me",0
0000b0  7465206d
0000b4  6500    
0000b6  00                DCB      0
0000b7  00                DCB      0

                          AREA ||i.lwip_standard_chksum||, CODE, READONLY, ALIGN=1

                  lwip_standard_chksum PROC
;;;134    static u16_t
;;;135    lwip_standard_chksum(void *dataptr, int len)
000000  b518              PUSH     {r3,r4,lr}
;;;136    {
;;;137      u8_t *pb = (u8_t *)dataptr;
;;;138      u16_t *ps, t = 0;
000002  2200              MOVS     r2,#0
000004  f8ad2000          STRH     r2,[sp,#0]
;;;139      u32_t sum = 0;
;;;140      int odd = ((mem_ptr_t)pb & 1);
000008  f0100301          ANDS     r3,r0,#1
00000c  d00b              BEQ      |L5.38|
;;;141    
;;;142      /* Get aligned to u16_t */
;;;143      if (odd && len > 0) {
00000e  2900              CMP      r1,#0
000010  dd09              BLE      |L5.38|
;;;144        ((u8_t *)&t)[1] = *pb++;
000012  f8104b01          LDRB     r4,[r0],#1
000016  f88d4001          STRB     r4,[sp,#1]
00001a  1e49              SUBS     r1,r1,#1
;;;145        len--;
00001c  e003              B        |L5.38|
                  |L5.30|
;;;146      }
;;;147    
;;;148      /* Add the bulk of the data */
;;;149      ps = (u16_t *)(void *)pb;
;;;150      while (len > 1) {
;;;151        sum += *ps++;
00001e  f8304b02          LDRH     r4,[r0],#2
000022  1e89              SUBS     r1,r1,#2
000024  4422              ADD      r2,r2,r4
                  |L5.38|
000026  2901              CMP      r1,#1                 ;150
000028  dcf9              BGT      |L5.30|
;;;152        len -= 2;
;;;153      }
;;;154    
;;;155      /* Consume left-over byte, if any */
;;;156      if (len > 0) {
00002a  2900              CMP      r1,#0
00002c  dd02              BLE      |L5.52|
;;;157        ((u8_t *)&t)[0] = *(u8_t *)ps;
00002e  7800              LDRB     r0,[r0,#0]
000030  f88d0000          STRB     r0,[sp,#0]
                  |L5.52|
;;;158      }
;;;159    
;;;160      /* Add end bytes */
;;;161      sum += t;
000034  f8bd0000          LDRH     r0,[sp,#0]
000038  4410              ADD      r0,r0,r2
;;;162    
;;;163      /* Fold 32-bit sum to 16 bits
;;;164         calling this twice is propably faster than if statements... */
;;;165      sum = FOLD_U32T(sum);
00003a  b281              UXTH     r1,r0
00003c  eb014010          ADD      r0,r1,r0,LSR #16
;;;166      sum = FOLD_U32T(sum);
000040  b281              UXTH     r1,r0
000042  eb014010          ADD      r0,r1,r0,LSR #16
;;;167    
;;;168      /* Swap if alignment was odd */
;;;169      if (odd) {
000046  b123              CBZ      r3,|L5.82|
;;;170        sum = SWAP_BYTES_IN_WORD(sum);
000048  b2c1              UXTB     r1,r0
00004a  f3c02007          UBFX     r0,r0,#8,#8
00004e  ea402001          ORR      r0,r0,r1,LSL #8
                  |L5.82|
;;;171      }
;;;172    
;;;173      return (u16_t)sum;
000052  b280              UXTH     r0,r0
;;;174    }
000054  bd18              POP      {r3,r4,pc}
;;;175    #endif
                          ENDP

