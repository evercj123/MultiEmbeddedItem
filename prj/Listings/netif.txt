; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\netif.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\netif.d --cpu=Cortex-M3 --apcs=interwork --diag_suppress=9931 -I..\app -I..\board -I..\cmsis -I..\lwip\src -I..\lwip\src\api -I..\lwip\src\arch -I..\lwip\src\core -I..\lwip\src\core\snmp -I..\lwip\src\include -I..\lwip\src\include\lwip -I..\lwip\src\include\ipv4 -I..\lwip\src\include\ipv4\lwip -I..\lwip\src\include\posix -I..\lwip\src\include\posix\sys -I..\lwip\src\netif -I..\lwip\src\netif\ppp -I..\stm_lib\inc -I..\stm_lib\src -I.\RTE\_lwip -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=523 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\netif.crf ..\lwip\src\core\netif.c]
                          THUMB

                          AREA ||i.netif_add||, CODE, READONLY, ALIGN=2

                  netif_add PROC
;;;138    struct netif *
;;;139    netif_add(struct netif *netif, ip_addr_t *ipaddr, ip_addr_t *netmask,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;140      ip_addr_t *gw, void *state, netif_init_fn init, netif_input_fn input)
;;;141    {
000004  4604              MOV      r4,r0
000006  e9dd6506          LDRD     r6,r5,[sp,#0x18]
00000a  9f08              LDR      r7,[sp,#0x20]
00000c  b1c5              CBZ      r5,|L1.64|
;;;142    
;;;143      LWIP_ASSERT("No init function given", init != NULL);
;;;144    
;;;145      /* reset new interface configuration state */
;;;146      ip_addr_set_zero(&netif->ip_addr);
00000e  2000              MOVS     r0,#0
;;;147      ip_addr_set_zero(&netif->netmask);
000010  6060              STR      r0,[r4,#4]
;;;148      ip_addr_set_zero(&netif->gw);
000012  60a0              STR      r0,[r4,#8]
;;;149      netif->flags = 0;
000014  60e0              STR      r0,[r4,#0xc]
000016  f8840029          STRB     r0,[r4,#0x29]
;;;150    #if LWIP_DHCP
;;;151      /* netif not under DHCP control by default */
;;;152      netif->dhcp = NULL;
;;;153    #endif /* LWIP_DHCP */
;;;154    #if LWIP_AUTOIP
;;;155      /* netif not under AutoIP control by default */
;;;156      netif->autoip = NULL;
;;;157    #endif /* LWIP_AUTOIP */
;;;158    #if LWIP_NETIF_STATUS_CALLBACK
;;;159      netif->status_callback = NULL;
;;;160    #endif /* LWIP_NETIF_STATUS_CALLBACK */
;;;161    #if LWIP_NETIF_LINK_CALLBACK
;;;162      netif->link_callback = NULL;
;;;163    #endif /* LWIP_NETIF_LINK_CALLBACK */
;;;164    #if LWIP_IGMP
;;;165      netif->igmp_mac_filter = NULL;
;;;166    #endif /* LWIP_IGMP */
;;;167    #if ENABLE_LOOPBACK
;;;168      netif->loop_first = NULL;
;;;169      netif->loop_last = NULL;
00001a  6320              STR      r0,[r4,#0x30]
;;;170    #endif /* ENABLE_LOOPBACK */
;;;171    
;;;172      /* remember netif specific state information data */
;;;173      netif->state = state;
;;;174      netif->num = netif_num++;
00001c  61e6              STR      r6,[r4,#0x1c]
00001e  4e0d              LDR      r6,|L1.84|
000020  6360              STR      r0,[r4,#0x34]
000022  7830              LDRB     r0,[r6,#0]  ; netif_num
000024  f884002c          STRB     r0,[r4,#0x2c]
000028  1c40              ADDS     r0,r0,#1
00002a  7030              STRB     r0,[r6,#0]
;;;175      netif->input = input;
;;;176      NETIF_SET_HWADDRHINT(netif, NULL);
;;;177    #if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
;;;178      netif->loop_cnt_current = 0;
;;;179    #endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */
;;;180    
;;;181      netif_set_addr(netif, ipaddr, netmask, gw);
00002c  4620              MOV      r0,r4
00002e  6127              STR      r7,[r4,#0x10]
000030  f7fffffe          BL       netif_set_addr
;;;182    
;;;183      /* call user specified initialization function for netif */
;;;184      if (init(netif) != ERR_OK) {
000034  4620              MOV      r0,r4
000036  47a8              BLX      r5
000038  b130              CBZ      r0,|L1.72|
;;;185        return NULL;
00003a  2000              MOVS     r0,#0
                  |L1.60|
;;;186      }
;;;187    
;;;188      /* add this netif to the list */
;;;189      netif->next = netif_list;
;;;190      netif_list = netif;
;;;191      snmp_inc_iflist();
;;;192    
;;;193    #if LWIP_IGMP
;;;194      /* start IGMP processing */
;;;195      if (netif->flags & NETIF_FLAG_IGMP) {
;;;196        igmp_start(netif);
;;;197      }
;;;198    #endif /* LWIP_IGMP */
;;;199    
;;;200      LWIP_DEBUGF(NETIF_DEBUG, ("netif: added interface %c%c IP addr ",
;;;201        netif->name[0], netif->name[1]));
;;;202      ip_addr_debug_print(NETIF_DEBUG, ipaddr);
;;;203      LWIP_DEBUGF(NETIF_DEBUG, (" netmask "));
;;;204      ip_addr_debug_print(NETIF_DEBUG, netmask);
;;;205      LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
;;;206      ip_addr_debug_print(NETIF_DEBUG, gw);
;;;207      LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
;;;208      return netif;
;;;209    }
00003c  e8bd81f0          POP      {r4-r8,pc}
                  |L1.64|
000040  a005              ADR      r0,|L1.88|
000042  f7fffffe          BL       __2printf
                  |L1.70|
000046  e7fe              B        |L1.70|
                  |L1.72|
000048  6870              LDR      r0,[r6,#4]            ;189  ; netif_list
00004a  6020              STR      r0,[r4,#0]            ;190
00004c  4620              MOV      r0,r4                 ;208
00004e  6074              STR      r4,[r6,#4]            ;208  ; netif_list
000050  e7f4              B        |L1.60|
;;;210    
                          ENDP

000052  0000              DCW      0x0000
                  |L1.84|
                          DCD      ||.data||
                  |L1.88|
000058  4e6f2069          DCB      "No init function given",0
00005c  6e697420
000060  66756e63
000064  74696f6e
000068  20676976
00006c  656e00  
00006f  00                DCB      0

                          AREA ||i.netif_find||, CODE, READONLY, ALIGN=2

                  netif_find PROC
;;;289    struct netif *
;;;290    netif_find(char *name)
000000  b510              PUSH     {r4,lr}
;;;291    {
000002  0001              MOVS     r1,r0
000004  d005              BEQ      |L2.18|
;;;292      struct netif *netif;
;;;293      u8_t num;
;;;294    
;;;295      if (name == NULL) {
;;;296        return NULL;
;;;297      }
;;;298    
;;;299      num = name[2] - '0';
000006  7888              LDRB     r0,[r1,#2]
000008  3830              SUBS     r0,r0,#0x30
00000a  b2c2              UXTB     r2,r0
;;;300    
;;;301      for(netif = netif_list; netif != NULL; netif = netif->next) {
00000c  480b              LDR      r0,|L2.60|
00000e  6840              LDR      r0,[r0,#4]  ; netif_list
000010  e010              B        |L2.52|
                  |L2.18|
000012  2000              MOVS     r0,#0                 ;296
                  |L2.20|
;;;302        if (num == netif->num &&
;;;303           name[0] == netif->name[0] &&
;;;304           name[1] == netif->name[1]) {
;;;305          LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: found %c%c\n", name[0], name[1]));
;;;306          return netif;
;;;307        }
;;;308      }
;;;309      LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: didn't find %c%c\n", name[0], name[1]));
;;;310      return NULL;
;;;311    }
000014  bd10              POP      {r4,pc}
                  |L2.22|
000016  f890302c          LDRB     r3,[r0,#0x2c]         ;302
00001a  4293              CMP      r3,r2                 ;302
00001c  d109              BNE      |L2.50|
00001e  780b              LDRB     r3,[r1,#0]            ;303
000020  f890402a          LDRB     r4,[r0,#0x2a]         ;303
000024  42a3              CMP      r3,r4                 ;303
000026  d104              BNE      |L2.50|
000028  784b              LDRB     r3,[r1,#1]            ;304
00002a  f890402b          LDRB     r4,[r0,#0x2b]         ;304
00002e  42a3              CMP      r3,r4                 ;304
000030  d0f0              BEQ      |L2.20|
                  |L2.50|
000032  6800              LDR      r0,[r0,#0]            ;301
                  |L2.52|
000034  2800              CMP      r0,#0                 ;301
000036  d1ee              BNE      |L2.22|
000038  bd10              POP      {r4,pc}
;;;312    
                          ENDP

00003a  0000              DCW      0x0000
                  |L2.60|
                          DCD      ||.data||

                          AREA ||i.netif_init||, CODE, READONLY, ALIGN=2

                  netif_init PROC
;;;105    void
;;;106    netif_init(void)
000000  b500              PUSH     {lr}
;;;107    {
000002  b087              SUB      sp,sp,#0x1c
;;;108    #if LWIP_HAVE_LOOPIF
;;;109      ip_addr_t loop_ipaddr, loop_netmask, loop_gw;
;;;110      IP4_ADDR(&loop_gw, 127,0,0,1);
000004  480a              LDR      r0,|L3.48|
;;;111      IP4_ADDR(&loop_ipaddr, 127,0,0,1);
000006  9003              STR      r0,[sp,#0xc]
;;;112      IP4_ADDR(&loop_netmask, 255,0,0,0);
000008  9004              STR      r0,[sp,#0x10]
00000a  20ff              MOVS     r0,#0xff
;;;113    
;;;114    #if NO_SYS
;;;115      netif_add(&loop_netif, &loop_ipaddr, &loop_netmask, &loop_gw, NULL, netif_loopif_init, ip_input);
00000c  9005              STR      r0,[sp,#0x14]
00000e  4a09              LDR      r2,|L3.52|
000010  4909              LDR      r1,|L3.56|
000012  2000              MOVS     r0,#0
000014  e88d0007          STM      sp,{r0-r2}
000018  ab03              ADD      r3,sp,#0xc
00001a  aa05              ADD      r2,sp,#0x14
00001c  a904              ADD      r1,sp,#0x10
00001e  4807              LDR      r0,|L3.60|
000020  f7fffffe          BL       netif_add
;;;116    #else  /* NO_SYS */
;;;117      netif_add(&loop_netif, &loop_ipaddr, &loop_netmask, &loop_gw, NULL, netif_loopif_init, tcpip_input);
;;;118    #endif /* NO_SYS */
;;;119      netif_set_up(&loop_netif);
000024  4805              LDR      r0,|L3.60|
000026  f7fffffe          BL       netif_set_up
;;;120    
;;;121    #endif /* LWIP_HAVE_LOOPIF */
;;;122    }
00002a  b007              ADD      sp,sp,#0x1c
00002c  bd00              POP      {pc}
;;;123    
                          ENDP

00002e  0000              DCW      0x0000
                  |L3.48|
                          DCD      0x0100007f
                  |L3.52|
                          DCD      ip_input
                  |L3.56|
                          DCD      netif_loopif_init
                  |L3.60|
                          DCD      ||.bss||

                          AREA ||i.netif_loop_output||, CODE, READONLY, ALIGN=2

                  netif_loop_output PROC
;;;609    err_t
;;;610    netif_loop_output(struct netif *netif, struct pbuf *p,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;611           ip_addr_t *ipaddr)
;;;612    {
000004  460c              MOV      r4,r1
000006  4606              MOV      r6,r0
;;;613      struct pbuf *r;
;;;614      err_t err;
;;;615      struct pbuf *last;
;;;616    #if LWIP_LOOPBACK_MAX_PBUFS
;;;617      u8_t clen = 0;
;;;618    #endif /* LWIP_LOOPBACK_MAX_PBUFS */
;;;619      /* If we have a loopif, SNMP counters are adjusted for it,
;;;620       * if not they are adjusted for 'netif'. */
;;;621    #if LWIP_SNMP
;;;622    #if LWIP_HAVE_LOOPIF
;;;623      struct netif *stats_if = &loop_netif;
;;;624    #else /* LWIP_HAVE_LOOPIF */
;;;625      struct netif *stats_if = netif;
;;;626    #endif /* LWIP_HAVE_LOOPIF */
;;;627    #endif /* LWIP_SNMP */
;;;628      SYS_ARCH_DECL_PROTECT(lev);
;;;629      LWIP_UNUSED_ARG(ipaddr);
;;;630    
;;;631      /* Allocate a new pbuf */
;;;632      r = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
000008  8909              LDRH     r1,[r1,#8]
00000a  2200              MOVS     r2,#0
00000c  2002              MOVS     r0,#2
00000e  f7fffffe          BL       pbuf_alloc
;;;633      if (r == NULL) {
;;;634        LINK_STATS_INC(link.memerr);
000012  4f1a              LDR      r7,|L4.124|
000014  0005              MOVS     r5,r0                 ;632
000016  d010              BEQ      |L4.58|
;;;635        LINK_STATS_INC(link.drop);
;;;636        snmp_inc_ifoutdiscards(stats_if);
;;;637        return ERR_MEM;
;;;638      }
;;;639    #if LWIP_LOOPBACK_MAX_PBUFS
;;;640      clen = pbuf_clen(r);
;;;641      /* check for overflow or too many pbuf on queue */
;;;642      if(((netif->loop_cnt_current + clen) < netif->loop_cnt_current) ||
;;;643         ((netif->loop_cnt_current + clen) > LWIP_LOOPBACK_MAX_PBUFS)) {
;;;644        pbuf_free(r);
;;;645        LINK_STATS_INC(link.memerr);
;;;646        LINK_STATS_INC(link.drop);
;;;647        snmp_inc_ifoutdiscards(stats_if);
;;;648        return ERR_MEM;
;;;649      }
;;;650      netif->loop_cnt_current += clen;
;;;651    #endif /* LWIP_LOOPBACK_MAX_PBUFS */
;;;652    
;;;653      /* Copy the whole pbuf queue p into the single pbuf r */
;;;654      if ((err = pbuf_copy(r, p)) != ERR_OK) {
000018  4621              MOV      r1,r4
00001a  f7fffffe          BL       pbuf_copy
00001e  0004              MOVS     r4,r0
000020  d014              BEQ      |L4.76|
;;;655        pbuf_free(r);
000022  4628              MOV      r0,r5
000024  f7fffffe          BL       pbuf_free
;;;656        LINK_STATS_INC(link.memerr);
000028  89b8              LDRH     r0,[r7,#0xc]  ; lwip_stats
00002a  1c40              ADDS     r0,r0,#1
00002c  81b8              STRH     r0,[r7,#0xc]
;;;657        LINK_STATS_INC(link.drop);
00002e  88f8              LDRH     r0,[r7,#6]  ; lwip_stats
000030  1c40              ADDS     r0,r0,#1
000032  80f8              STRH     r0,[r7,#6]
;;;658        snmp_inc_ifoutdiscards(stats_if);
;;;659        return err;
000034  4620              MOV      r0,r4
                  |L4.54|
;;;660      }
;;;661    
;;;662      /* Put the packet on a linked list which gets emptied through calling
;;;663         netif_poll(). */
;;;664    
;;;665      /* let last point to the last pbuf in chain r */
;;;666      for (last = r; last->next != NULL; last = last->next);
;;;667    
;;;668      SYS_ARCH_PROTECT(lev);
;;;669      if(netif->loop_first != NULL) {
;;;670        LWIP_ASSERT("if first != NULL, last must also be != NULL", netif->loop_last != NULL);
;;;671        netif->loop_last->next = r;
;;;672        netif->loop_last = last;
;;;673      } else {
;;;674        netif->loop_first = r;
;;;675        netif->loop_last = last;
;;;676      }
;;;677      SYS_ARCH_UNPROTECT(lev);
;;;678    
;;;679      LINK_STATS_INC(link.xmit);
;;;680      snmp_add_ifoutoctets(stats_if, p->tot_len);
;;;681      snmp_inc_ifoutucastpkts(stats_if);
;;;682    
;;;683    #if LWIP_NETIF_LOOPBACK_MULTITHREADING
;;;684      /* For multithreading environment, schedule a call to netif_poll */
;;;685      tcpip_callback((tcpip_callback_fn)netif_poll, netif);
;;;686    #endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */
;;;687    
;;;688      return ERR_OK;
;;;689    }
000036  e8bd81f0          POP      {r4-r8,pc}
                  |L4.58|
00003a  89b8              LDRH     r0,[r7,#0xc]          ;634  ; lwip_stats
00003c  1c40              ADDS     r0,r0,#1              ;634
00003e  81b8              STRH     r0,[r7,#0xc]          ;634
000040  88f8              LDRH     r0,[r7,#6]            ;635  ; lwip_stats
000042  1c40              ADDS     r0,r0,#1              ;635
000044  80f8              STRH     r0,[r7,#6]            ;635
000046  f04f30ff          MOV      r0,#0xffffffff        ;637
00004a  e7f4              B        |L4.54|
                  |L4.76|
00004c  462c              MOV      r4,r5                 ;666
00004e  e000              B        |L4.82|
                  |L4.80|
000050  4604              MOV      r4,r0                 ;666
                  |L4.82|
000052  6820              LDR      r0,[r4,#0]            ;666
000054  2800              CMP      r0,#0                 ;666
000056  d1fb              BNE      |L4.80|
000058  6b30              LDR      r0,[r6,#0x30]         ;669
00005a  b140              CBZ      r0,|L4.110|
00005c  6b70              LDR      r0,[r6,#0x34]         ;670
00005e  b110              CBZ      r0,|L4.102|
000060  6005              STR      r5,[r0,#0]            ;672
000062  6374              STR      r4,[r6,#0x34]         ;672
000064  e005              B        |L4.114|
                  |L4.102|
000066  a006              ADR      r0,|L4.128|
000068  f7fffffe          BL       __2printf
                  |L4.108|
00006c  e7fe              B        |L4.108|
                  |L4.110|
00006e  e9c6540c          STRD     r5,r4,[r6,#0x30]      ;670
                  |L4.114|
000072  8838              LDRH     r0,[r7,#0]            ;679  ; lwip_stats
000074  1c40              ADDS     r0,r0,#1              ;679
000076  8038              STRH     r0,[r7,#0]            ;679
000078  2000              MOVS     r0,#0                 ;688
00007a  e7dc              B        |L4.54|
;;;690    
                          ENDP

                  |L4.124|
                          DCD      lwip_stats
                  |L4.128|
000080  69662066          DCB      "if first != NULL, last must also be != NULL",0
000084  69727374
000088  20213d20
00008c  4e554c4c
000090  2c206c61
000094  7374206d
000098  75737420
00009c  616c736f
0000a0  20626520
0000a4  213d204e
0000a8  554c4c00

                          AREA ||i.netif_loopif_init||, CODE, READONLY, ALIGN=2

                  netif_loopif_init PROC
;;;90     static err_t
;;;91     netif_loopif_init(struct netif *netif)
000000  216c              MOVS     r1,#0x6c
;;;92     {
;;;93       /* initialize the snmp variables and counters inside the struct netif
;;;94        * ifSpeed: no assumption can be made!
;;;95        */
;;;96       NETIF_INIT_SNMP(netif, snmp_ifType_softwareLoopback, 0);
;;;97     
;;;98       netif->name[0] = 'l';
000002  f880102a          STRB     r1,[r0,#0x2a]
;;;99       netif->name[1] = 'o';
000006  216f              MOVS     r1,#0x6f
000008  f880102b          STRB     r1,[r0,#0x2b]
;;;100      netif->output = netif_loop_output;
00000c  4901              LDR      r1,|L5.20|
;;;101      return ERR_OK;
00000e  6141              STR      r1,[r0,#0x14]
000010  2000              MOVS     r0,#0
;;;102    }
000012  4770              BX       lr
;;;103    #endif /* LWIP_HAVE_LOOPIF */
                          ENDP

                  |L5.20|
                          DCD      netif_loop_output

                          AREA ||i.netif_poll||, CODE, READONLY, ALIGN=2

                  netif_poll PROC
;;;697    void
;;;698    netif_poll(struct netif *netif)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;699    {
000004  4605              MOV      r5,r0
000006  2700              MOVS     r7,#0
                  |L6.8|
;;;700      struct pbuf *in;
;;;701      /* If we have a loopif, SNMP counters are adjusted for it,
;;;702       * if not they are adjusted for 'netif'. */
;;;703    #if LWIP_SNMP
;;;704    #if LWIP_HAVE_LOOPIF
;;;705      struct netif *stats_if = &loop_netif;
;;;706    #else /* LWIP_HAVE_LOOPIF */
;;;707      struct netif *stats_if = netif;
;;;708    #endif /* LWIP_HAVE_LOOPIF */
;;;709    #endif /* LWIP_SNMP */
;;;710      SYS_ARCH_DECL_PROTECT(lev);
;;;711    
;;;712      do {
;;;713        /* Get a packet from the list. With SYS_LIGHTWEIGHT_PROT=1, this is protected */
;;;714        SYS_ARCH_PROTECT(lev);
;;;715        in = netif->loop_first;
;;;716        if (in != NULL) {
000008  6b2e              LDR      r6,[r5,#0x30]
00000a  2e00              CMP      r6,#0
00000c  d025              BEQ      |L6.90|
;;;717          struct pbuf *in_end = in;
00000e  4634              MOV      r4,r6
;;;718    #if LWIP_LOOPBACK_MAX_PBUFS
;;;719          u8_t clen = pbuf_clen(in);
;;;720          /* adjust the number of pbufs on queue */
;;;721          LWIP_ASSERT("netif->loop_cnt_current underflow",
;;;722            ((netif->loop_cnt_current - clen) < netif->loop_cnt_current));
;;;723          netif->loop_cnt_current -= clen;
;;;724    #endif /* LWIP_LOOPBACK_MAX_PBUFS */
;;;725          while (in_end->len != in_end->tot_len) {
000010  e001              B        |L6.22|
                  |L6.18|
;;;726            LWIP_ASSERT("bogus pbuf: len != tot_len but next == NULL!", in_end->next != NULL);
000012  6824              LDR      r4,[r4,#0]
000014  b14c              CBZ      r4,|L6.42|
                  |L6.22|
000016  8960              LDRH     r0,[r4,#0xa]          ;725
000018  8921              LDRH     r1,[r4,#8]            ;725
00001a  4288              CMP      r0,r1                 ;725
00001c  d1f9              BNE      |L6.18|
;;;727            in_end = in_end->next;
;;;728          }
;;;729          /* 'in_end' now points to the last pbuf from 'in' */
;;;730          if (in_end == netif->loop_last) {
00001e  6b68              LDR      r0,[r5,#0x34]
000020  42a0              CMP      r0,r4
000022  d106              BNE      |L6.50|
;;;731            /* this was the last pbuf in the list */
;;;732            netif->loop_first = netif->loop_last = NULL;
000024  636f              STR      r7,[r5,#0x34]
000026  632f              STR      r7,[r5,#0x30]
000028  e006              B        |L6.56|
                  |L6.42|
00002a  a00f              ADR      r0,|L6.104|
00002c  f7fffffe          BL       __2printf
                  |L6.48|
000030  e7fe              B        |L6.48|
                  |L6.50|
;;;733          } else {
;;;734            /* pop the pbuf off the list */
;;;735            netif->loop_first = in_end->next;
000032  6820              LDR      r0,[r4,#0]
;;;736            LWIP_ASSERT("should not be null since first != last!", netif->loop_first != NULL);
000034  6328              STR      r0,[r5,#0x30]
000036  b190              CBZ      r0,|L6.94|
                  |L6.56|
;;;737          }
;;;738          /* De-queue the pbuf from its successors on the 'loop_' list. */
;;;739          in_end->next = NULL;
;;;740        }
000038  6027              STR      r7,[r4,#0]
00003a  b15e              CBZ      r6,|L6.84|
;;;741        SYS_ARCH_UNPROTECT(lev);
;;;742    
;;;743        if (in != NULL) {
;;;744          LINK_STATS_INC(link.recv);
00003c  4816              LDR      r0,|L6.152|
00003e  8841              LDRH     r1,[r0,#2]  ; lwip_stats
000040  1c49              ADDS     r1,r1,#1
000042  8041              STRH     r1,[r0,#2]
;;;745          snmp_add_ifinoctets(stats_if, in->tot_len);
;;;746          snmp_inc_ifinucastpkts(stats_if);
;;;747          /* loopback packets are always IP packets! */
;;;748          if (ip_input(in, netif) != ERR_OK) {
000044  4629              MOV      r1,r5
000046  4630              MOV      r0,r6
000048  f7fffffe          BL       ip_input
00004c  b110              CBZ      r0,|L6.84|
;;;749            pbuf_free(in);
00004e  4630              MOV      r0,r6
000050  f7fffffe          BL       pbuf_free
                  |L6.84|
;;;750          }
;;;751          /* Don't reference the packet any more! */
;;;752          in = NULL;
;;;753        }
;;;754      /* go on while there is a packet on the list */
;;;755      } while (netif->loop_first != NULL);
000054  6b28              LDR      r0,[r5,#0x30]
000056  2800              CMP      r0,#0
000058  d1d6              BNE      |L6.8|
                  |L6.90|
;;;756    }
00005a  e8bd81f0          POP      {r4-r8,pc}
                  |L6.94|
00005e  a00f              ADR      r0,|L6.156|
000060  f7fffffe          BL       __2printf
                  |L6.100|
000064  e7fe              B        |L6.100|
;;;757    
                          ENDP

000066  0000              DCW      0x0000
                  |L6.104|
000068  626f6775          DCB      "bogus pbuf: len != tot_len but next == NULL!",0
00006c  73207062
000070  75663a20
000074  6c656e20
000078  213d2074
00007c  6f745f6c
000080  656e2062
000084  7574206e
000088  65787420
00008c  3d3d204e
000090  554c4c21
000094  00      
000095  00                DCB      0
000096  00                DCB      0
000097  00                DCB      0
                  |L6.152|
                          DCD      lwip_stats
                  |L6.156|
00009c  73686f75          DCB      "should not be null since first != last!",0
0000a0  6c64206e
0000a4  6f742062
0000a8  65206e75
0000ac  6c6c2073
0000b0  696e6365
0000b4  20666972
0000b8  73742021
0000bc  3d206c61
0000c0  73742100

                          AREA ||i.netif_poll_all||, CODE, READONLY, ALIGN=2

                  netif_poll_all PROC
;;;762    void
;;;763    netif_poll_all(void)
000000  4805              LDR      r0,|L7.24|
;;;764    {
000002  b510              PUSH     {r4,lr}
000004  6844              LDR      r4,[r0,#4]  ; netif_list
000006  e003              B        |L7.16|
                  |L7.8|
;;;765      struct netif *netif = netif_list;
;;;766      /* loop through netifs */
;;;767      while (netif != NULL) {
;;;768        netif_poll(netif);
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       netif_poll
;;;769        /* proceed to next network interface */
;;;770        netif = netif->next;
00000e  6824              LDR      r4,[r4,#0]
                  |L7.16|
000010  2c00              CMP      r4,#0                 ;767
000012  d1f9              BNE      |L7.8|
;;;771      }
;;;772    }
000014  bd10              POP      {r4,pc}
;;;773    #endif /* !LWIP_NETIF_LOOPBACK_MULTITHREADING */
                          ENDP

000016  0000              DCW      0x0000
                  |L7.24|
                          DCD      ||.data||

                          AREA ||i.netif_remove||, CODE, READONLY, ALIGN=2

                  netif_remove PROC
;;;234    void
;;;235    netif_remove(struct netif *netif)
000000  b510              PUSH     {r4,lr}
;;;236    {
000002  0004              MOVS     r4,r0
000004  d019              BEQ      |L8.58|
;;;237      if (netif == NULL) {
;;;238        return;
;;;239      }
;;;240    
;;;241    #if LWIP_IGMP
;;;242      /* stop IGMP processing */
;;;243      if (netif->flags & NETIF_FLAG_IGMP) {
;;;244        igmp_stop(netif);
;;;245      }
;;;246    #endif /* LWIP_IGMP */
;;;247      if (netif_is_up(netif)) {
000006  f8940029          LDRB     r0,[r4,#0x29]
00000a  07c0              LSLS     r0,r0,#31
00000c  d002              BEQ      |L8.20|
;;;248        /* set netif down before removing (call callback function) */
;;;249        netif_set_down(netif);
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       netif_set_down
                  |L8.20|
;;;250      }
;;;251    
;;;252      snmp_delete_ipaddridx_tree(netif);
;;;253    
;;;254      /*  is it the first netif? */
;;;255      if (netif_list == netif) {
000014  4a0b              LDR      r2,|L8.68|
000016  6851              LDR      r1,[r2,#4]  ; netif_list
000018  42a1              CMP      r1,r4
00001a  d110              BNE      |L8.62|
;;;256        netif_list = netif->next;
00001c  6820              LDR      r0,[r4,#0]
00001e  6050              STR      r0,[r2,#4]  ; netif_list
000020  e006              B        |L8.48|
                  |L8.34|
;;;257      } else {
;;;258        /*  look for netif further down the list */
;;;259        struct netif * tmpNetif;
;;;260        for (tmpNetif = netif_list; tmpNetif != NULL; tmpNetif = tmpNetif->next) {
;;;261          if (tmpNetif->next == netif) {
000022  6808              LDR      r0,[r1,#0]
000024  42a0              CMP      r0,r4
000026  d109              BNE      |L8.60|
;;;262            tmpNetif->next = netif->next;
000028  6820              LDR      r0,[r4,#0]
;;;263            break;
00002a  6008              STR      r0,[r1,#0]
00002c  2900              CMP      r1,#0
00002e  d004              BEQ      |L8.58|
                  |L8.48|
;;;264          }
;;;265        }
;;;266        if (tmpNetif == NULL)
;;;267          return; /*  we didn't find any netif today */
;;;268      }
;;;269      snmp_dec_iflist();
;;;270      /* this netif is default? */
;;;271      if (netif_default == netif) {
000030  6890              LDR      r0,[r2,#8]  ; netif_default
000032  42a0              CMP      r0,r4
000034  d101              BNE      |L8.58|
;;;272        /* reset default netif */
;;;273        netif_set_default(NULL);
000036  2000              MOVS     r0,#0
000038  6090              STR      r0,[r2,#8]  ; netif_default
                  |L8.58|
;;;274      }
;;;275    #if LWIP_NETIF_REMOVE_CALLBACK
;;;276      if (netif->remove_callback) {
;;;277        netif->remove_callback(netif);
;;;278      }
;;;279    #endif /* LWIP_NETIF_REMOVE_CALLBACK */
;;;280      LWIP_DEBUGF( NETIF_DEBUG, ("netif_remove: removed netif\n") );
;;;281    }
00003a  bd10              POP      {r4,pc}
                  |L8.60|
00003c  4601              MOV      r1,r0                 ;260
                  |L8.62|
00003e  2900              CMP      r1,#0                 ;260
000040  d1ef              BNE      |L8.34|
000042  bd10              POP      {r4,pc}
;;;282    
                          ENDP

                  |L8.68|
                          DCD      ||.data||

                          AREA ||i.netif_set_addr||, CODE, READONLY, ALIGN=1

                  netif_set_addr PROC
;;;220    void
;;;221    netif_set_addr(struct netif *netif, ip_addr_t *ipaddr, ip_addr_t *netmask,
000000  b570              PUSH     {r4-r6,lr}
;;;222        ip_addr_t *gw)
;;;223    {
000002  461d              MOV      r5,r3
000004  4616              MOV      r6,r2
000006  4604              MOV      r4,r0
;;;224      netif_set_ipaddr(netif, ipaddr);
000008  f7fffffe          BL       netif_set_ipaddr
;;;225      netif_set_netmask(netif, netmask);
00000c  4631              MOV      r1,r6
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       netif_set_netmask
;;;226      netif_set_gw(netif, gw);
000014  4629              MOV      r1,r5
000016  4620              MOV      r0,r4
000018  e8bd4070          POP      {r4-r6,lr}
00001c  f7ffbffe          B.W      netif_set_gw
;;;227    }
;;;228    
                          ENDP


                          AREA ||i.netif_set_default||, CODE, READONLY, ALIGN=2

                  netif_set_default PROC
;;;429    void
;;;430    netif_set_default(struct netif *netif)
000000  4901              LDR      r1,|L10.8|
;;;431    {
;;;432      if (netif == NULL) {
;;;433        /* remove default route */
;;;434        snmp_delete_iprteidx_tree(1, netif);
;;;435      } else {
;;;436        /* install default route */
;;;437        snmp_insert_iprteidx_tree(1, netif);
;;;438      }
;;;439      netif_default = netif;
000002  6088              STR      r0,[r1,#8]  ; netif_default
;;;440      LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
;;;441               netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
;;;442    }
000004  4770              BX       lr
;;;443    
                          ENDP

000006  0000              DCW      0x0000
                  |L10.8|
                          DCD      ||.data||

                          AREA ||i.netif_set_down||, CODE, READONLY, ALIGN=1

                  netif_set_down PROC
;;;489     */ 
;;;490    void netif_set_down(struct netif *netif)
000000  f8901029          LDRB     r1,[r0,#0x29]
;;;491    {
;;;492      if (netif->flags & NETIF_FLAG_UP) {
000004  07ca              LSLS     r2,r1,#31
000006  d007              BEQ      |L11.24|
;;;493        netif->flags &= ~NETIF_FLAG_UP;
000008  f0210101          BIC      r1,r1,#1
00000c  f8801029          STRB     r1,[r0,#0x29]
;;;494    #if LWIP_SNMP
;;;495        snmp_get_sysuptime(&netif->ts);
;;;496    #endif
;;;497    
;;;498    #if LWIP_ARP
;;;499        if (netif->flags & NETIF_FLAG_ETHARP) {
000010  0689              LSLS     r1,r1,#26
000012  d501              BPL      |L11.24|
;;;500          etharp_cleanup_netif(netif);
000014  f7ffbffe          B.W      etharp_cleanup_netif
                  |L11.24|
;;;501        }
;;;502    #endif /* LWIP_ARP */
;;;503        NETIF_STATUS_CALLBACK(netif);
;;;504      }
;;;505    }
000018  4770              BX       lr
;;;506    
                          ENDP


                          AREA ||i.netif_set_gw||, CODE, READONLY, ALIGN=1

                  netif_set_gw PROC
;;;387    void
;;;388    netif_set_gw(struct netif *netif, ip_addr_t *gw)
000000  b101              CBZ      r1,|L12.4|
;;;389    {
;;;390      ip_addr_set(&(netif->gw), gw);
000002  6809              LDR      r1,[r1,#0]
                  |L12.4|
000004  60c1              STR      r1,[r0,#0xc]
;;;391      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: GW address of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
;;;392        netif->name[0], netif->name[1],
;;;393        ip4_addr1_16(&netif->gw),
;;;394        ip4_addr2_16(&netif->gw),
;;;395        ip4_addr3_16(&netif->gw),
;;;396        ip4_addr4_16(&netif->gw)));
;;;397    }
000006  4770              BX       lr
;;;398    
                          ENDP


                          AREA ||i.netif_set_ipaddr||, CODE, READONLY, ALIGN=2

                  netif_set_ipaddr PROC
;;;322    void
;;;323    netif_set_ipaddr(struct netif *netif, ip_addr_t *ipaddr)
000000  b570              PUSH     {r4-r6,lr}
;;;324    {
000002  000c              MOVS     r4,r1
000004  4605              MOV      r5,r0
000006  d028              BEQ      |L13.90|
;;;325      /* TODO: Handling of obsolete pcbs */
;;;326      /* See:  http://mail.gnu.org/archive/html/lwip-users/2003-03/msg00118.html */
;;;327    #if LWIP_TCP
;;;328      struct tcp_pcb *pcb;
;;;329      struct tcp_pcb_listen *lpcb;
;;;330    
;;;331      /* address is actually being changed? */
;;;332      if (ipaddr && (ip_addr_cmp(ipaddr, &(netif->ip_addr))) == 0) {
000008  6820              LDR      r0,[r4,#0]
00000a  6869              LDR      r1,[r5,#4]
00000c  4288              CMP      r0,r1
00000e  d01e              BEQ      |L13.78|
;;;333        /* extern struct tcp_pcb *tcp_active_pcbs; defined by tcp.h */
;;;334        LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
;;;335        pcb = tcp_active_pcbs;
000010  4813              LDR      r0,|L13.96|
000012  6800              LDR      r0,[r0,#0]  ; tcp_active_pcbs
;;;336        while (pcb != NULL) {
000014  e009              B        |L13.42|
                  |L13.22|
;;;337          /* PCB bound to current local interface address? */
;;;338          if (ip_addr_cmp(&(pcb->local_ip), &(netif->ip_addr))
000016  6801              LDR      r1,[r0,#0]
000018  686a              LDR      r2,[r5,#4]
00001a  4291              CMP      r1,r2
00001c  d104              BNE      |L13.40|
;;;339    #if LWIP_AUTOIP
;;;340            /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
;;;341            && !ip_addr_islinklocal(&(pcb->local_ip))
;;;342    #endif /* LWIP_AUTOIP */
;;;343            ) {
;;;344            /* this connection must be aborted */
;;;345            struct tcp_pcb *next = pcb->next;
;;;346            LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
;;;347            tcp_abort(pcb);
00001e  68c6              LDR      r6,[r0,#0xc]
000020  f7fffffe          BL       tcp_abort
;;;348            pcb = next;
000024  4630              MOV      r0,r6
;;;349          } else {
000026  e000              B        |L13.42|
                  |L13.40|
;;;350            pcb = pcb->next;
000028  68c0              LDR      r0,[r0,#0xc]
                  |L13.42|
00002a  2800              CMP      r0,#0                 ;336
00002c  d1f3              BNE      |L13.22|
;;;351          }
;;;352        }
;;;353        for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
00002e  480d              LDR      r0,|L13.100|
000030  6800              LDR      r0,[r0,#0]  ; tcp_listen_pcbs
000032  e009              B        |L13.72|
                  |L13.52|
;;;354          /* PCB bound to current local interface address? */
;;;355          if ((!(ip_addr_isany(&(lpcb->local_ip)))) &&
000034  d007              BEQ      |L13.70|
000036  6801              LDR      r1,[r0,#0]
000038  b129              CBZ      r1,|L13.70|
;;;356              (ip_addr_cmp(&(lpcb->local_ip), &(netif->ip_addr)))) {
00003a  686a              LDR      r2,[r5,#4]
00003c  4291              CMP      r1,r2
00003e  d102              BNE      |L13.70|
;;;357            /* The PCB is listening to the old ipaddr and
;;;358             * is set to listen to the new one instead */
;;;359            ip_addr_set(&(lpcb->local_ip), ipaddr);
000040  b144              CBZ      r4,|L13.84|
000042  6821              LDR      r1,[r4,#0]
                  |L13.68|
000044  6001              STR      r1,[r0,#0]
                  |L13.70|
000046  68c0              LDR      r0,[r0,#0xc]          ;353
                  |L13.72|
000048  2800              CMP      r0,#0                 ;353
00004a  d1f3              BNE      |L13.52|
;;;360          }
;;;361        }
;;;362      }
;;;363    #endif
;;;364      snmp_delete_ipaddridx_tree(netif);
;;;365      snmp_delete_iprteidx_tree(0,netif);
;;;366      /* set new IP address to netif */
;;;367      ip_addr_set(&(netif->ip_addr), ipaddr);
00004c  b12c              CBZ      r4,|L13.90|
                  |L13.78|
00004e  6820              LDR      r0,[r4,#0]
                  |L13.80|
000050  6068              STR      r0,[r5,#4]
;;;368      snmp_insert_ipaddridx_tree(netif);
;;;369      snmp_insert_iprteidx_tree(0,netif);
;;;370    
;;;371      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: IP address of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
;;;372        netif->name[0], netif->name[1],
;;;373        ip4_addr1_16(&netif->ip_addr),
;;;374        ip4_addr2_16(&netif->ip_addr),
;;;375        ip4_addr3_16(&netif->ip_addr),
;;;376        ip4_addr4_16(&netif->ip_addr)));
;;;377    }
000052  bd70              POP      {r4-r6,pc}
                  |L13.84|
000054  f04f0100          MOV      r1,#0                 ;359
000058  e7f4              B        |L13.68|
                  |L13.90|
00005a  f04f0000          MOV      r0,#0                 ;367
00005e  e7f7              B        |L13.80|
;;;378    
                          ENDP

                  |L13.96|
                          DCD      tcp_active_pcbs
                  |L13.100|
                          DCD      tcp_listen_pcbs

                          AREA ||i.netif_set_link_down||, CODE, READONLY, ALIGN=1

                  netif_set_link_down PROC
;;;573     */
;;;574    void netif_set_link_down(struct netif *netif )
000000  f8901029          LDRB     r1,[r0,#0x29]
;;;575    {
;;;576      if (netif->flags & NETIF_FLAG_LINK_UP) {
000004  06ca              LSLS     r2,r1,#27
000006  d503              BPL      |L14.16|
;;;577        netif->flags &= ~NETIF_FLAG_LINK_UP;
000008  f0210110          BIC      r1,r1,#0x10
00000c  f8801029          STRB     r1,[r0,#0x29]
                  |L14.16|
;;;578        NETIF_LINK_CALLBACK(netif);
;;;579      }
;;;580    }
000010  4770              BX       lr
;;;581    
                          ENDP


                          AREA ||i.netif_set_link_up||, CODE, READONLY, ALIGN=1

                  netif_set_link_up PROC
;;;534     */
;;;535    void netif_set_link_up(struct netif *netif )
000000  f8901029          LDRB     r1,[r0,#0x29]
;;;536    {
;;;537      if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
000004  06ca              LSLS     r2,r1,#27
000006  d40a              BMI      |L15.30|
;;;538        netif->flags |= NETIF_FLAG_LINK_UP;
000008  f0410110          ORR      r1,r1,#0x10
00000c  f8801029          STRB     r1,[r0,#0x29]
;;;539    
;;;540    #if LWIP_DHCP
;;;541        if (netif->dhcp) {
;;;542          dhcp_network_changed(netif);
;;;543        }
;;;544    #endif /* LWIP_DHCP */
;;;545    
;;;546    #if LWIP_AUTOIP
;;;547        if (netif->autoip) {
;;;548          autoip_network_changed(netif);
;;;549        }
;;;550    #endif /* LWIP_AUTOIP */
;;;551    
;;;552        if (netif->flags & NETIF_FLAG_UP) {
000010  07ca              LSLS     r2,r1,#31
000012  d004              BEQ      |L15.30|
;;;553    #if LWIP_ARP
;;;554          /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */ 
;;;555          if (netif->flags & NETIF_FLAG_ETHARP) {
000014  0689              LSLS     r1,r1,#26
000016  d502              BPL      |L15.30|
;;;556            etharp_gratuitous(netif);
000018  1d01              ADDS     r1,r0,#4
00001a  f7ffbffe          B.W      etharp_request
                  |L15.30|
;;;557          }
;;;558    #endif /* LWIP_ARP */
;;;559    
;;;560    #if LWIP_IGMP
;;;561          /* resend IGMP memberships */
;;;562          if (netif->flags & NETIF_FLAG_IGMP) {
;;;563            igmp_report_groups( netif);
;;;564          }
;;;565    #endif /* LWIP_IGMP */
;;;566        }
;;;567        NETIF_LINK_CALLBACK(netif);
;;;568      }
;;;569    }
00001e  4770              BX       lr
;;;570    
                          ENDP


                          AREA ||i.netif_set_netmask||, CODE, READONLY, ALIGN=1

                  netif_set_netmask PROC
;;;408    void
;;;409    netif_set_netmask(struct netif *netif, ip_addr_t *netmask)
000000  b101              CBZ      r1,|L16.4|
;;;410    {
;;;411      snmp_delete_iprteidx_tree(0, netif);
;;;412      /* set new netmask to netif */
;;;413      ip_addr_set(&(netif->netmask), netmask);
000002  6809              LDR      r1,[r1,#0]
                  |L16.4|
000004  6081              STR      r1,[r0,#8]
;;;414      snmp_insert_iprteidx_tree(0, netif);
;;;415      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: netmask of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
;;;416        netif->name[0], netif->name[1],
;;;417        ip4_addr1_16(&netif->netmask),
;;;418        ip4_addr2_16(&netif->netmask),
;;;419        ip4_addr3_16(&netif->netmask),
;;;420        ip4_addr4_16(&netif->netmask)));
;;;421    }
000006  4770              BX       lr
;;;422    
                          ENDP


                          AREA ||i.netif_set_up||, CODE, READONLY, ALIGN=1

                  netif_set_up PROC
;;;452     */ 
;;;453    void netif_set_up(struct netif *netif)
000000  f8901029          LDRB     r1,[r0,#0x29]
;;;454    {
;;;455      if (!(netif->flags & NETIF_FLAG_UP)) {
000004  07ca              LSLS     r2,r1,#31
000006  d10a              BNE      |L17.30|
;;;456        netif->flags |= NETIF_FLAG_UP;
000008  f0410101          ORR      r1,r1,#1
00000c  f8801029          STRB     r1,[r0,#0x29]
;;;457        
;;;458    #if LWIP_SNMP
;;;459        snmp_get_sysuptime(&netif->ts);
;;;460    #endif /* LWIP_SNMP */
;;;461    
;;;462        NETIF_STATUS_CALLBACK(netif);
;;;463    
;;;464        if (netif->flags & NETIF_FLAG_LINK_UP) {
000010  06ca              LSLS     r2,r1,#27
000012  d504              BPL      |L17.30|
;;;465    #if LWIP_ARP
;;;466          /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */ 
;;;467          if (netif->flags & (NETIF_FLAG_ETHARP)) {
000014  0689              LSLS     r1,r1,#26
000016  d502              BPL      |L17.30|
;;;468            etharp_gratuitous(netif);
000018  1d01              ADDS     r1,r0,#4
00001a  f7ffbffe          B.W      etharp_request
                  |L17.30|
;;;469          }
;;;470    #endif /* LWIP_ARP */
;;;471    
;;;472    #if LWIP_IGMP
;;;473          /* resend IGMP memberships */
;;;474          if (netif->flags & NETIF_FLAG_IGMP) {
;;;475            igmp_report_groups( netif);
;;;476          }
;;;477    #endif /* LWIP_IGMP */
;;;478        }
;;;479      }
;;;480    }
00001e  4770              BX       lr
;;;481    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  loop_netif
                          %        56

                          AREA ||.data||, DATA, ALIGN=2

                  netif_num
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  netif_list
                          DCD      0x00000000
                  netif_default
                          DCD      0x00000000
