; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\enc28j60.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\enc28j60.d --cpu=Cortex-M3 --apcs=interwork --diag_suppress=9931 -I..\app -I..\board -I..\cmsis -I..\lwip\src -I..\lwip\src\api -I..\lwip\src\arch -I..\lwip\src\core -I..\lwip\src\core\snmp -I..\lwip\src\include -I..\lwip\src\include\lwip -I..\lwip\src\include\ipv4 -I..\lwip\src\include\ipv4\lwip -I..\lwip\src\include\posix -I..\lwip\src\include\posix\sys -I..\lwip\src\netif -I..\lwip\src\netif\ppp -I..\stm_lib\inc -I..\stm_lib\src -I.\RTE\_lwip -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=523 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\enc28j60.crf ..\lwip\src\arch\ENC28J60.C]
                          THUMB

                          AREA ||i.enc28j60Init||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  enc28j60Init PROC
;;;186    ****************************************************************************/ 
;;;187    void enc28j60Init(unsigned char* macaddr)
000000  b510              PUSH     {r4,lr}
;;;188    {
;;;189    	ENC28J60_CSH();	                              //SPI1 ENC28J60片选禁止  
000002  4967              LDR      r1,|L1.416|
000004  4604              MOV      r4,r0                 ;188
000006  2004              MOVS     r0,#4
000008  6008              STR      r0,[r1,#0]
;;;190    	/* ENC28J60软件复位 
;;;191    	   系统命令（软件复位）（SC） 1 1 1 | 1 1 1 1 1    N/A */
;;;192    	enc28j60WriteOp(ENC28J60_SOFT_RESET, 0, ENC28J60_SOFT_RESET); 
00000a  22ff              MOVS     r2,#0xff
00000c  2100              MOVS     r1,#0
00000e  4610              MOV      r0,r2
000010  f7fffffe          BL       enc28j60WriteOp
                  |L1.20|
;;;193        /*在上电复位或ENC28J60 从掉电模式恢复
;;;194    	  后，在发送数据包、使能接收数据包或允
;;;195    	  许访问任何MAC、MII 或PHY 寄存器之
;;;196    	  前，必须查询CLKRDY 位。*/
;;;197    	while(!(enc28j60Read(ESTAT) & ESTAT_CLKRDY)); //    
000014  201d              MOVS     r0,#0x1d
000016  f7fffffe          BL       enc28j60Read
00001a  07c0              LSLS     r0,r0,#31
00001c  d0fa              BEQ      |L1.20|
;;;198    	// do bank 0 stuff
;;;199    	// initialize receive buffer
;;;200    	// 16-bit transfers, must write low byte first
;;;201    	// 设置接收缓冲区开始地址
;;;202    	NextPacketPtr = RXSTART_INIT;
00001e  4961              LDR      r1,|L1.420|
000020  2000              MOVS     r0,#0
;;;203            // Rx start
;;;204    	//接收缓冲器由一个硬件管理的循环FIFO 缓冲器构成。
;;;205    //寄存器对ERXSTH:ERXSTL 和ERXNDH:ERXNDL 作
;;;206    //为指针，定义缓冲器的容量和其在存储器中的位置。
;;;207    //ERXST和ERXND指向的字节均包含在FIFO缓冲器内。
;;;208    //当从以太网接口接收数据字节时，这些字节被顺序写入
;;;209    //接收缓冲器。 但是当写入由ERXND 指向的存储单元
;;;210    //后，硬件会自动将接收的下一字节写入由ERXST 指向
;;;211    //的存储单元。 因此接收硬件将不会写入FIFO 以外的单
;;;212    //元。
;;;213    	enc28j60Write(ERXSTL, RXSTART_INIT&0xFF);	 //
000022  6048              STR      r0,[r1,#4]  ; NextPacketPtr
000024  4601              MOV      r1,r0
000026  2008              MOVS     r0,#8
000028  f7fffffe          BL       enc28j60Write
;;;214    	enc28j60Write(ERXSTH, RXSTART_INIT>>8);
00002c  2100              MOVS     r1,#0
00002e  2009              MOVS     r0,#9
000030  f7fffffe          BL       enc28j60Write
;;;215    	// set receive pointer address
;;;216    	//ERXWRPTH:ERXWRPTL 寄存器定义硬件向FIFO 中
;;;217        //的哪个位置写入其接收到的字节。 指针是只读的，在成
;;;218        //功接收到一个数据包后，硬件会自动更新指针。 指针可
;;;219        //用于判断FIFO 内剩余空间的大小  8K-1500。 
;;;220    	enc28j60Write(ERXRDPTL, RXSTART_INIT&0xFF);
000034  2100              MOVS     r1,#0
000036  200c              MOVS     r0,#0xc
000038  f7fffffe          BL       enc28j60Write
;;;221    	enc28j60Write(ERXRDPTH, RXSTART_INIT>>8);
00003c  2100              MOVS     r1,#0
00003e  200d              MOVS     r0,#0xd
000040  f7fffffe          BL       enc28j60Write
;;;222    	// RX end  规定了接收区位于0---（0x1fff-0x600-1)
;;;223    	enc28j60Write(ERXNDL, RXSTOP_INIT&0xFF);
000044  21fe              MOVS     r1,#0xfe
000046  200a              MOVS     r0,#0xa
000048  f7fffffe          BL       enc28j60Write
;;;224    	enc28j60Write(ERXNDH, RXSTOP_INIT>>8);
00004c  2119              MOVS     r1,#0x19
00004e  200b              MOVS     r0,#0xb
000050  f7fffffe          BL       enc28j60Write
;;;225    	// TX start	  0x1fff-0x600
;;;226    	enc28j60Write(ETXSTL, TXSTART_INIT&0xFF);
000054  21ff              MOVS     r1,#0xff
000056  2004              MOVS     r0,#4
000058  f7fffffe          BL       enc28j60Write
;;;227    	enc28j60Write(ETXSTH, TXSTART_INIT>>8);
00005c  2119              MOVS     r1,#0x19
00005e  2005              MOVS     r0,#5
000060  f7fffffe          BL       enc28j60Write
;;;228    	// TX end	  规定了接收区位于0x1fff-0x600---0x1fff	 
;;;229    	enc28j60Write(ETXNDL, TXSTOP_INIT&0xFF);
000064  21ff              MOVS     r1,#0xff
000066  2006              MOVS     r0,#6
000068  f7fffffe          BL       enc28j60Write
;;;230    	enc28j60Write(ETXNDH, TXSTOP_INIT>>8);
00006c  211f              MOVS     r1,#0x1f
00006e  2007              MOVS     r0,#7
000070  f7fffffe          BL       enc28j60Write
;;;231    	// do bank 1 stuff, packet filter:
;;;232            // For broadcast packets we allow only ARP packtets
;;;233            // All other packets should be unicast only for our mac (MAADR)
;;;234            //
;;;235            // The pattern to match on is therefore
;;;236            // Type     ETH.DST
;;;237            // ARP      BROADCAST
;;;238            // 06 08 -- ff ff ff ff ff ff -> ip checksum for theses bytes=f7f9
;;;239            // in binary these poitions are:11 0000 0011 1111
;;;240            // This is hex 303F->EPMM0=0x3f,EPMM1=0x30
;;;241        //接收过滤器
;;;242    	//UCEN：单播过滤器使能位
;;;243        //当ANDOR = 1 时：
;;;244    	//1 = 目标地址与本地MAC 地址不匹配的数据包将被丢弃
;;;245    	//0 = 禁止过滤器
;;;246    	//当ANDOR = 0 时：
;;;247    	//1 = 目标地址与本地MAC 地址匹配的数据包会被接受
;;;248    	//0 = 禁止过滤器
;;;249    
;;;250        //CRCEN：后过滤器CRC 校验使能位
;;;251    	//1 = 所有CRC 无效的数据包都将被丢弃
;;;252    	//0 = 不考虑CRC 是否有效
;;;253    	
;;;254    	//PMEN：格式匹配过滤器使能位
;;;255    	//当ANDOR = 1 时：
;;;256    	//1 = 数据包必须符合格式匹配条件，否则将被丢弃
;;;257    	//0 = 禁止过滤器
;;;258    	//当ANDOR = 0 时：
;;;259    	//1 = 符合格式匹配条件的数据包将被接受
;;;260    	//0 = 禁止过滤器
;;;261    	enc28j60Write(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN);
000074  21b0              MOVS     r1,#0xb0
000076  2038              MOVS     r0,#0x38
000078  f7fffffe          BL       enc28j60Write
;;;262    	enc28j60Write(EPMM0, 0x3f);
00007c  213f              MOVS     r1,#0x3f
00007e  2028              MOVS     r0,#0x28
000080  f7fffffe          BL       enc28j60Write
;;;263    	enc28j60Write(EPMM1, 0x30);
000084  2130              MOVS     r1,#0x30
000086  2029              MOVS     r0,#0x29
000088  f7fffffe          BL       enc28j60Write
;;;264    	enc28j60Write(EPMCSL, 0xf9);
00008c  21f9              MOVS     r1,#0xf9
00008e  2030              MOVS     r0,#0x30
000090  f7fffffe          BL       enc28j60Write
;;;265    	enc28j60Write(EPMCSH, 0xf7);
000094  21f7              MOVS     r1,#0xf7
000096  2031              MOVS     r0,#0x31
000098  f7fffffe          BL       enc28j60Write
;;;266            //
;;;267            //
;;;268    	// do bank 2 stuff
;;;269    	// enable MAC receive
;;;270    	//bit 0 MARXEN：MAC 接收使能位
;;;271    		//1 = 允许MAC 接收数据包
;;;272    		//0 = 禁止数据包接收
;;;273    	//bit 3 TXPAUS：暂停控制帧发送使能位
;;;274    		//1 = 允许MAC 发送暂停控制帧（用于全双工模式下的流量控制）
;;;275    		//0 = 禁止暂停帧发送
;;;276    	//bit 2 RXPAUS：暂停控制帧接收使能位
;;;277    		//1 = 当接收到暂停控制帧时，禁止发送（正常操作）
;;;278    		//0 = 忽略接收到的暂停控制帧
;;;279    	enc28j60Write(MACON1, MACON1_MARXEN|MACON1_TXPAUS|MACON1_RXPAUS);
00009c  210d              MOVS     r1,#0xd
00009e  20c0              MOVS     r0,#0xc0
0000a0  f7fffffe          BL       enc28j60Write
;;;280    	// bring MAC out of reset
;;;281    	//将MACON2 中的MARST 位清零，使MAC 退出复位状态。
;;;282    	enc28j60Write(MACON2, 0x00);
0000a4  2100              MOVS     r1,#0
0000a6  20c1              MOVS     r0,#0xc1
0000a8  f7fffffe          BL       enc28j60Write
;;;283    	// enable automatic padding to 60bytes and CRC operations
;;;284    	//bit 7-5 PADCFG2:PACDFG0：自动填充和CRC 配置位
;;;285    		//111 = 用0 填充所有短帧至64 字节长，并追加一个有效的CRC
;;;286    		//110 = 不自动填充短帧
;;;287    		//101 = MAC 自动检测具有8100h 类型字段的VLAN 协议帧，并自动填充到64 字节长。如果不
;;;288    		//是VLAN 帧，则填充至60 字节长。填充后还要追加一个有效的CRC
;;;289    		//100 = 不自动填充短帧
;;;290    		//011 = 用0 填充所有短帧至64 字节长，并追加一个有效的CRC
;;;291    		//010 = 不自动填充短帧
;;;292    		//001 = 用0 填充所有短帧至60 字节长，并追加一个有效的CRC
;;;293    		//000 = 不自动填充短帧
;;;294    	//bit 4 TXCRCEN：发送CRC 使能位
;;;295    		//1 = 不管PADCFG如何，MAC都会在发送帧的末尾追加一个有效的CRC。 如果PADCFG规定要
;;;296    		//追加有效的CRC，则必须将TXCRCEN 置1。
;;;297    		//0 = MAC不会追加CRC。 检查最后4 个字节，如果不是有效的CRC 则报告给发送状态向量。
;;;298    	//bit 0 FULDPX：MAC 全双工使能位
;;;299    		//1 = MAC工作在全双工模式下。 PHCON1.PDPXMD 位必须置1。
;;;300    		//0 = MAC工作在半双工模式下。 PHCON1.PDPXMD 位必须清零。
;;;301    	/* 提示 由于ENC28J60不支持802.3的自动协商机制， 所以对端的网络卡需要强制设置为全双工 */
;;;302    	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, MACON3, MACON3_PADCFG0|MACON3_TXCRCEN|MACON3_FRMLNEN|MACON3_FULDPX);
0000ac  2233              MOVS     r2,#0x33
0000ae  21c2              MOVS     r1,#0xc2
0000b0  2080              MOVS     r0,#0x80
0000b2  f7fffffe          BL       enc28j60WriteOp
;;;303    	// set inter-frame gap (non-back-to-back)
;;;304    	//配置非背对背包间间隔寄存器的低字节
;;;305    	//MAIPGL。 大多数应用使用12h 编程该寄存器。
;;;306    	//如果使用半双工模式，应编程非背对背包间间隔
;;;307    	//寄存器的高字节MAIPGH。 大多数应用使用0Ch
;;;308    	//编程该寄存器。
;;;309    	enc28j60Write(MAIPGL, 0x12);
0000b6  2112              MOVS     r1,#0x12
0000b8  20c6              MOVS     r0,#0xc6
0000ba  f7fffffe          BL       enc28j60Write
;;;310    	enc28j60Write(MAIPGH, 0x0C);
0000be  210c              MOVS     r1,#0xc
0000c0  20c7              MOVS     r0,#0xc7
0000c2  f7fffffe          BL       enc28j60Write
;;;311    	// set inter-frame gap (back-to-back)
;;;312    	//配置背对背包间间隔寄存器MABBIPG。当使用
;;;313    	//全双工模式时，大多数应用使用15h 编程该寄存
;;;314    	//器，而使用半双工模式时则使用12h 进行编程。
;;;315    	enc28j60Write(MABBIPG, 0x15);
0000c6  2115              MOVS     r1,#0x15
0000c8  20c4              MOVS     r0,#0xc4
0000ca  f7fffffe          BL       enc28j60Write
;;;316    	// Set the maximum packet size which the controller will accept
;;;317        // Do not send packets longer than MAX_FRAMELEN:
;;;318    	// 最大帧长度  1500
;;;319    	enc28j60Write(MAMXFLL, MAX_FRAMELEN&0xFF);	
0000ce  21dc              MOVS     r1,#0xdc
0000d0  20ca              MOVS     r0,#0xca
0000d2  f7fffffe          BL       enc28j60Write
;;;320    	enc28j60Write(MAMXFLH, MAX_FRAMELEN>>8);
0000d6  2105              MOVS     r1,#5
0000d8  20cb              MOVS     r0,#0xcb
0000da  f7fffffe          BL       enc28j60Write
;;;321    	// do bank 3 stuff
;;;322    	// write MAC address
;;;323    	// NOTE: MAC address in ENC28J60 is byte-backward
;;;324    	enc28j60Write(MAADR5, macaddr[0]);	
0000de  7821              LDRB     r1,[r4,#0]
0000e0  20e4              MOVS     r0,#0xe4
0000e2  f7fffffe          BL       enc28j60Write
;;;325    	enc28j60Write(MAADR4, macaddr[1]);
0000e6  7861              LDRB     r1,[r4,#1]
0000e8  20e5              MOVS     r0,#0xe5
0000ea  f7fffffe          BL       enc28j60Write
;;;326    	enc28j60Write(MAADR3, macaddr[2]);
0000ee  78a1              LDRB     r1,[r4,#2]
0000f0  20e2              MOVS     r0,#0xe2
0000f2  f7fffffe          BL       enc28j60Write
;;;327    	enc28j60Write(MAADR2, macaddr[3]);
0000f6  78e1              LDRB     r1,[r4,#3]
0000f8  20e3              MOVS     r0,#0xe3
0000fa  f7fffffe          BL       enc28j60Write
;;;328    	enc28j60Write(MAADR1, macaddr[4]);
0000fe  7921              LDRB     r1,[r4,#4]
000100  20e0              MOVS     r0,#0xe0
000102  f7fffffe          BL       enc28j60Write
;;;329    	enc28j60Write(MAADR0, macaddr[5]);
000106  7961              LDRB     r1,[r4,#5]
000108  20e1              MOVS     r0,#0xe1
00010a  f7fffffe          BL       enc28j60Write
;;;330    	if(enc28j60Read(MAADR5)== macaddr[0]){
00010e  20e4              MOVS     r0,#0xe4
000110  f7fffffe          BL       enc28j60Read
000114  7821              LDRB     r1,[r4,#0]
000116  4288              CMP      r0,r1
000118  d129              BNE      |L1.366|
;;;331    		printf("MAADR5 = %x\r\n", enc28j60Read(MAADR5));
00011a  20e4              MOVS     r0,#0xe4
00011c  f7fffffe          BL       enc28j60Read
000120  4601              MOV      r1,r0
000122  a021              ADR      r0,|L1.424|
000124  f7fffffe          BL       __2printf
;;;332    		printf("MAADR4 = %x\r\n", enc28j60Read(MAADR4));
000128  20e5              MOVS     r0,#0xe5
00012a  f7fffffe          BL       enc28j60Read
00012e  4601              MOV      r1,r0
000130  a021              ADR      r0,|L1.440|
000132  f7fffffe          BL       __2printf
;;;333    		printf("MAADR3 = %x\r\n", enc28j60Read(MAADR3));
000136  20e2              MOVS     r0,#0xe2
000138  f7fffffe          BL       enc28j60Read
00013c  4601              MOV      r1,r0
00013e  a022              ADR      r0,|L1.456|
000140  f7fffffe          BL       __2printf
;;;334    		printf("MAADR2 = %x\r\n", enc28j60Read(MAADR2));
000144  20e3              MOVS     r0,#0xe3
000146  f7fffffe          BL       enc28j60Read
00014a  4601              MOV      r1,r0
00014c  a022              ADR      r0,|L1.472|
00014e  f7fffffe          BL       __2printf
;;;335    		printf("MAADR1 = %x\r\n", enc28j60Read(MAADR1));
000152  20e0              MOVS     r0,#0xe0
000154  f7fffffe          BL       enc28j60Read
000158  4601              MOV      r1,r0
00015a  a023              ADR      r0,|L1.488|
00015c  f7fffffe          BL       __2printf
;;;336    		printf("MAADR0 = %x\r\n", enc28j60Read(MAADR0));
000160  20e1              MOVS     r0,#0xe1
000162  f7fffffe          BL       enc28j60Read
000166  4601              MOV      r1,r0
000168  a023              ADR      r0,|L1.504|
00016a  f7fffffe          BL       __2printf
                  |L1.366|
;;;337    	}
;;;338    	//配置PHY为全双工  LEDB为拉电流
;;;339    	enc28j60PhyWrite(PHCON1, PHCON1_PDPXMD);
00016e  f44f7480          MOV      r4,#0x100
000172  4621              MOV      r1,r4
000174  2000              MOVS     r0,#0
000176  f7fffffe          BL       enc28j60PhyWrite
;;;340    
;;;341    
;;;342    	// no loopback of transmitted frames	 禁止环回
;;;343        //HDLDIS：PHY 半双工环回禁止位
;;;344    		//当PHCON1.PDPXMD = 1 或PHCON1.PLOOPBK = 1 时：
;;;345    		//此位可被忽略。
;;;346    		//当PHCON1.PDPXMD = 0 且PHCON1.PLOOPBK = 0 时：
;;;347    		//1 = 要发送的数据仅通过双绞线接口发出
;;;348    		//0 = 要发送的数据会环回到MAC 并通过双绞线接口发出
;;;349    	enc28j60PhyWrite(PHCON2, PHCON2_HDLDIS);
00017a  4621              MOV      r1,r4
00017c  2010              MOVS     r0,#0x10
00017e  f7fffffe          BL       enc28j60PhyWrite
;;;350    	// switch to bank 0
;;;351    	//ECON1 寄存器
;;;352    		//寄存器3-1 所示为ECON1 寄存器，它用于控制
;;;353    		//ENC28J60 的主要功能。 ECON1 中包含接收使能、发
;;;354    		//送请求、DMA 控制和存储区选择位。
;;;355    	
;;;356    	enc28j60SetBank(ECON1);
000182  201f              MOVS     r0,#0x1f
000184  f7fffffe          BL       enc28j60SetBank
;;;357    	// enable interrutps
;;;358    	//EIE： 以太网中断允许寄存器
;;;359    	//bit 7 INTIE： 全局INT 中断允许位
;;;360    		//1 = 允许中断事件驱动INT 引脚
;;;361    		//0 = 禁止所有INT 引脚的活动（引脚始终被驱动为高电平）
;;;362    	//bit 6 PKTIE： 接收数据包待处理中断允许位
;;;363    		//1 = 允许接收数据包待处理中断
;;;364    		//0 = 禁止接收数据包待处理中断
;;;365    	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE|EIE_PKTIE|EIE_RXERIE);
000188  22c1              MOVS     r2,#0xc1
00018a  211b              MOVS     r1,#0x1b
00018c  2080              MOVS     r0,#0x80
00018e  f7fffffe          BL       enc28j60WriteOp
;;;366    	// enable packet reception
;;;367    	//bit 2 RXEN：接收使能位
;;;368    		//1 = 通过当前过滤器的数据包将被写入接收缓冲器
;;;369    		//0 = 忽略所有接收的数据包
;;;370    	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
000192  2204              MOVS     r2,#4
000194  211f              MOVS     r1,#0x1f
000196  e8bd4010          POP      {r4,lr}
00019a  2080              MOVS     r0,#0x80
00019c  f7ffbffe          B.W      enc28j60WriteOp
;;;371    	}
;;;372    
                          ENDP

                  |L1.416|
                          DCD      0x40010810
                  |L1.420|
                          DCD      ||.data||
                  |L1.424|
0001a8  4d414144          DCB      "MAADR5 = %x\r\n",0
0001ac  5235203d
0001b0  2025780d
0001b4  0a00    
0001b6  00                DCB      0
0001b7  00                DCB      0
                  |L1.440|
0001b8  4d414144          DCB      "MAADR4 = %x\r\n",0
0001bc  5234203d
0001c0  2025780d
0001c4  0a00    
0001c6  00                DCB      0
0001c7  00                DCB      0
                  |L1.456|
0001c8  4d414144          DCB      "MAADR3 = %x\r\n",0
0001cc  5233203d
0001d0  2025780d
0001d4  0a00    
0001d6  00                DCB      0
0001d7  00                DCB      0
                  |L1.472|
0001d8  4d414144          DCB      "MAADR2 = %x\r\n",0
0001dc  5232203d
0001e0  2025780d
0001e4  0a00    
0001e6  00                DCB      0
0001e7  00                DCB      0
                  |L1.488|
0001e8  4d414144          DCB      "MAADR1 = %x\r\n",0
0001ec  5231203d
0001f0  2025780d
0001f4  0a00    
0001f6  00                DCB      0
0001f7  00                DCB      0
                  |L1.504|
0001f8  4d414144          DCB      "MAADR0 = %x\r\n",0
0001fc  5230203d
000200  2025780d
000204  0a00    
000206  00                DCB      0
000207  00                DCB      0

                          AREA ||i.enc28j60PacketReceive||, CODE, READONLY, ALIGN=2

                  enc28j60PacketReceive PROC
;;;434    ****************************************************************************/ 
;;;435    unsigned int enc28j60PacketReceive(unsigned int maxlen, unsigned char* packet)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;436    {
000004  4606              MOV      r6,r0
000006  4688              MOV      r8,r1
;;;437    	unsigned int rxstat;
;;;438    	unsigned int len;
;;;439    
;;;440    	//检查是否收到一个包
;;;441    	if( enc28j60Read(EPKTCNT) ==0 )  			//收到的以太网数据包长度   EPKCNT中记录了接收到的以太网包的数据长度信息；
000008  2039              MOVS     r0,#0x39
00000a  f7fffffe          BL       enc28j60Read
00000e  2800              CMP      r0,#0
000010  d04a              BEQ      |L2.168|
;;;442    	{
;;;443    		return(0);
;;;444        }
;;;445    
;;;446    	// 设置接收缓冲器读指针
;;;447    	enc28j60Write(ERDPTL, (NextPacketPtr));
000012  4d26              LDR      r5,|L2.172|
000014  2000              MOVS     r0,#0
000016  7929              LDRB     r1,[r5,#4]  ; NextPacketPtr
000018  f7fffffe          BL       enc28j60Write
;;;448    	enc28j60Write(ERDPTH, (NextPacketPtr)>>8);
00001c  88a8              LDRH     r0,[r5,#4]  ; NextPacketPtr
00001e  f3c02107          UBFX     r1,r0,#8,#8
000022  2001              MOVS     r0,#1
000024  f7fffffe          BL       enc28j60Write
;;;449    
;;;450    	// 读下一个包的指针
;;;451    	NextPacketPtr  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
000028  2100              MOVS     r1,#0
00002a  203a              MOVS     r0,#0x3a
00002c  f7fffffe          BL       enc28j60ReadOp
;;;452    	NextPacketPtr |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
000030  6068              STR      r0,[r5,#4]  ; NextPacketPtr
000032  2100              MOVS     r1,#0
000034  203a              MOVS     r0,#0x3a
000036  f7fffffe          BL       enc28j60ReadOp
00003a  6869              LDR      r1,[r5,#4]  ; NextPacketPtr
00003c  ea412000          ORR      r0,r1,r0,LSL #8
;;;453    
;;;454    	// 读包的长度
;;;455    	len  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
000040  6068              STR      r0,[r5,#4]  ; NextPacketPtr
000042  2100              MOVS     r1,#0
000044  203a              MOVS     r0,#0x3a
000046  f7fffffe          BL       enc28j60ReadOp
00004a  4604              MOV      r4,r0
;;;456    	len |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
00004c  2100              MOVS     r1,#0
00004e  203a              MOVS     r0,#0x3a
000050  f7fffffe          BL       enc28j60ReadOp
000054  ea442400          ORR      r4,r4,r0,LSL #8
;;;457    
;;;458        len-=4; 				//删除CRC计数
;;;459    	// 读接收状态
;;;460    	rxstat  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
000058  2100              MOVS     r1,#0
00005a  203a              MOVS     r0,#0x3a
00005c  1f24              SUBS     r4,r4,#4
00005e  f7fffffe          BL       enc28j60ReadOp
000062  4607              MOV      r7,r0
;;;461    	rxstat |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
000064  2100              MOVS     r1,#0
000066  203a              MOVS     r0,#0x3a
000068  f7fffffe          BL       enc28j60ReadOp
;;;462    
;;;463    	// 限制检索的长度	  
;;;464        if (len>maxlen-1)
00006c  1e71              SUBS     r1,r6,#1
00006e  ea472000          ORR      r0,r7,r0,LSL #8       ;461
000072  428c              CMP      r4,r1
000074  d900              BLS      |L2.120|
;;;465    	{
;;;466            len=maxlen-1;
000076  460c              MOV      r4,r1
                  |L2.120|
;;;467       	}
;;;468    
;;;469        // 检查CRC和符号错误
;;;470        //  ERXFCON.CRCEN是默认设置。通常我们不需要检查
;;;471        if ((rxstat & 0x80)==0)
000078  0600              LSLS     r0,r0,#24
00007a  d401              BMI      |L2.128|
;;;472    	{
;;;473    	   //无效的
;;;474    	   len=0;
00007c  2400              MOVS     r4,#0
00007e  e003              B        |L2.136|
                  |L2.128|
;;;475    	}
;;;476    	else
;;;477    	{
;;;478           // 从接收缓冲器中复制数据包
;;;479            enc28j60ReadBuffer(len, packet);
000080  4641              MOV      r1,r8
000082  4620              MOV      r0,r4
000084  f7fffffe          BL       enc28j60ReadBuffer
                  |L2.136|
;;;480        }
;;;481    
;;;482    	//RX读指针移动到下一个接收到的数据包的开始位置 
;;;483    	//释放我们刚才读出过的内存
;;;484    	enc28j60Write(ERXRDPTL, (NextPacketPtr));
000088  7929              LDRB     r1,[r5,#4]  ; NextPacketPtr
00008a  200c              MOVS     r0,#0xc
00008c  f7fffffe          BL       enc28j60Write
;;;485    	enc28j60Write(ERXRDPTH, (NextPacketPtr)>>8);
000090  88a8              LDRH     r0,[r5,#4]  ; NextPacketPtr
000092  f3c02107          UBFX     r1,r0,#8,#8
000096  200d              MOVS     r0,#0xd
000098  f7fffffe          BL       enc28j60Write
;;;486    
;;;487    	//递减数据包计数器标志我们已经得到了这个包 
;;;488    	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
00009c  2240              MOVS     r2,#0x40
00009e  211e              MOVS     r1,#0x1e
0000a0  2080              MOVS     r0,#0x80
0000a2  f7fffffe          BL       enc28j60WriteOp
;;;489    	return(len);
0000a6  4620              MOV      r0,r4
                  |L2.168|
;;;490    }
0000a8  e8bd81f0          POP      {r4-r8,pc}
;;;491    
                          ENDP

                  |L2.172|
                          DCD      ||.data||

                          AREA ||i.enc28j60PacketSend||, CODE, READONLY, ALIGN=1

                  enc28j60PacketSend PROC
;;;396    ****************************************************************************/ 
;;;397    void enc28j60PacketSend(unsigned int len, unsigned char* packet)
000000  b570              PUSH     {r4-r6,lr}
;;;398    	{
000002  460d              MOV      r5,r1
000004  4604              MOV      r4,r0
                  |L3.6|
;;;399    	// 设置发送缓冲区地址写指针入口 Set the write pointer to start of transmit buffer area
;;;400    	while((enc28j60Read(ECON1) & ECON1_TXRTS)!=0); //    
000006  201f              MOVS     r0,#0x1f
000008  f7fffffe          BL       enc28j60Read
00000c  0700              LSLS     r0,r0,#28
00000e  d4fa              BMI      |L3.6|
;;;401    	enc28j60Write(EWRPTL, TXSTART_INIT&0xFF);
000010  21ff              MOVS     r1,#0xff
000012  2002              MOVS     r0,#2
000014  f7fffffe          BL       enc28j60Write
;;;402    	enc28j60Write(EWRPTH, TXSTART_INIT>>8);
000018  2119              MOVS     r1,#0x19
00001a  2003              MOVS     r0,#3
00001c  f7fffffe          BL       enc28j60Write
;;;403    
;;;404    	//设置TXND指针，以对应给定的数据包大小	   
;;;405    	enc28j60Write(ETXNDL, (TXSTART_INIT+len)&0xFF);
000020  f64110ff          MOV      r0,#0x19ff
000024  1826              ADDS     r6,r4,r0
000026  b2f1              UXTB     r1,r6
000028  2006              MOVS     r0,#6
00002a  f7fffffe          BL       enc28j60Write
;;;406    	enc28j60Write(ETXNDH, (TXSTART_INIT+len)>>8);
00002e  f3c62107          UBFX     r1,r6,#8,#8
000032  2007              MOVS     r0,#7
000034  f7fffffe          BL       enc28j60Write
;;;407    
;;;408    	// 写每包控制字节（0x00表示使用macon3的设置） 
;;;409    	enc28j60WriteOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
000038  2200              MOVS     r2,#0
00003a  4611              MOV      r1,r2
00003c  207a              MOVS     r0,#0x7a
00003e  f7fffffe          BL       enc28j60WriteOp
;;;410    
;;;411    	// 将数据包复制到发送缓冲区	
;;;412    	enc28j60WriteBuffer(len, packet);
000042  4629              MOV      r1,r5
000044  4620              MOV      r0,r4
000046  f7fffffe          BL       enc28j60WriteBuffer
;;;413    
;;;414    	// 在网络上发送发送缓冲区的内容  
;;;415    	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
00004a  2208              MOVS     r2,#8
00004c  211f              MOVS     r1,#0x1f
00004e  2080              MOVS     r0,#0x80
000050  f7fffffe          BL       enc28j60WriteOp
;;;416    
;;;417        // 复位发送逻辑的问题。参见 Rev. B4 Silicon Errata point 12.
;;;418    	if( (enc28j60Read(EIR) & EIR_TXERIF) )
000054  201c              MOVS     r0,#0x1c
000056  f7fffffe          BL       enc28j60Read
00005a  0780              LSLS     r0,r0,#30
00005c  d509              BPL      |L3.114|
;;;419    	{
;;;420    		enc28j60SetBank(ECON1);
00005e  201f              MOVS     r0,#0x1f
000060  f7fffffe          BL       enc28j60SetBank
;;;421            enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRTS);
000064  e8bd4070          POP      {r4-r6,lr}
000068  2208              MOVS     r2,#8
00006a  211f              MOVS     r1,#0x1f
00006c  20a0              MOVS     r0,#0xa0
00006e  f7ffbffe          B.W      enc28j60WriteOp
                  |L3.114|
;;;422    		//enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
;;;423        }
;;;424    }
000072  bd70              POP      {r4-r6,pc}
;;;425    /****************************************************************************
                          ENDP


                          AREA ||i.enc28j60PhyWrite||, CODE, READONLY, ALIGN=1

                  enc28j60PhyWrite PROC
;;;155    ****************************************************************************/ 
;;;156    void enc28j60PhyWrite(unsigned char address, unsigned int data)
000000  b510              PUSH     {r4,lr}
;;;157    {
000002  460c              MOV      r4,r1
;;;158    	// set the PHY register address
;;;159    	enc28j60Write(MIREGADR, address);
000004  4601              MOV      r1,r0
000006  20d4              MOVS     r0,#0xd4
000008  f7fffffe          BL       enc28j60Write
;;;160    	// write the PHY data
;;;161    	enc28j60Write(MIWRL, data);
00000c  b2e1              UXTB     r1,r4
00000e  20d6              MOVS     r0,#0xd6
000010  f7fffffe          BL       enc28j60Write
;;;162    	enc28j60Write(MIWRH, data>>8);
000014  f3c42107          UBFX     r1,r4,#8,#8
000018  20d7              MOVS     r0,#0xd7
00001a  f7fffffe          BL       enc28j60Write
                  |L4.30|
;;;163    	// 等待PHY寄存器写入完成
;;;164    	while(enc28j60Read(MISTAT) & MISTAT_BUSY);
00001e  20ea              MOVS     r0,#0xea
000020  f7fffffe          BL       enc28j60Read
000024  07c0              LSLS     r0,r0,#31
000026  d1fa              BNE      |L4.30|
;;;165    }
000028  bd10              POP      {r4,pc}
;;;166    /****************************************************************************
                          ENDP


                          AREA ||i.enc28j60Read||, CODE, READONLY, ALIGN=1

                  enc28j60Read PROC
;;;125    ****************************************************************************/ 
;;;126    unsigned char enc28j60Read(unsigned char address)
000000  b510              PUSH     {r4,lr}
;;;127    {
000002  4604              MOV      r4,r0
;;;128    	// set the bank
;;;129    	enc28j60SetBank(address);
000004  f7fffffe          BL       enc28j60SetBank
;;;130    	// do the read
;;;131    	return enc28j60ReadOp(ENC28J60_READ_CTRL_REG, address);
000008  4621              MOV      r1,r4
00000a  e8bd4010          POP      {r4,lr}
00000e  2000              MOVS     r0,#0
000010  f7ffbffe          B.W      enc28j60ReadOp
;;;132    }
;;;133    /****************************************************************************
                          ENDP


                          AREA ||i.enc28j60ReadBuffer||, CODE, READONLY, ALIGN=2

                  enc28j60ReadBuffer PROC
;;;61     ****************************************************************************/ 
;;;62     void enc28j60ReadBuffer(unsigned int len, unsigned char* data)
000000  b570              PUSH     {r4-r6,lr}
;;;63     	{
000002  4605              MOV      r5,r0
;;;64     	ENC28J60_CSL();
000004  480a              LDR      r0,|L6.48|
000006  2604              MOVS     r6,#4
000008  460c              MOV      r4,r1                 ;63
00000a  6006              STR      r6,[r0,#0]
;;;65     	// 读命令
;;;66     	SPI1_ReadWrite(ENC28J60_READ_BUF_MEM);
00000c  203a              MOVS     r0,#0x3a
00000e  f7fffffe          BL       SPI1_ReadWrite
;;;67     	while(len)
000012  e004              B        |L6.30|
                  |L6.20|
000014  1e6d              SUBS     r5,r5,#1
;;;68     	{
;;;69             len--;
;;;70             // read data
;;;71             *data = (unsigned char)SPI1_ReadWrite(0);
000016  f7fffffe          BL       SPI1_ReadWrite
00001a  f8040b01          STRB     r0,[r4],#1
                  |L6.30|
;;;72             data++;
;;;73     	}
;;;74     	*data='\0';
00001e  f04f0000          MOV      r0,#0
000022  2d00              CMP      r5,#0                 ;67
000024  d1f6              BNE      |L6.20|
000026  7020              STRB     r0,[r4,#0]
;;;75     	ENC28J60_CSH();
000028  4802              LDR      r0,|L6.52|
00002a  6006              STR      r6,[r0,#0]
;;;76     }
00002c  bd70              POP      {r4-r6,pc}
;;;77     /****************************************************************************
                          ENDP

00002e  0000              DCW      0x0000
                  |L6.48|
                          DCD      0x40010814
                  |L6.52|
                          DCD      0x40010810

                          AREA ||i.enc28j60ReadOp||, CODE, READONLY, ALIGN=2

                  enc28j60ReadOp PROC
;;;17     ****************************************************************************/ 
;;;18     unsigned char enc28j60ReadOp(unsigned char op, unsigned char address)
000000  b570              PUSH     {r4-r6,lr}
;;;19     {
000002  460c              MOV      r4,r1
;;;20     	unsigned char dat = 0;
;;;21     	
;;;22     	ENC28J60_CSL();
000004  4909              LDR      r1,|L7.44|
000006  2504              MOVS     r5,#4
000008  600d              STR      r5,[r1,#0]
;;;23     	
;;;24     	dat = op | (address & ADDR_MASK);
00000a  f004011f          AND      r1,r4,#0x1f
00000e  4308              ORRS     r0,r0,r1
;;;25     	SPI1_ReadWrite(dat);
000010  f7fffffe          BL       SPI1_ReadWrite
;;;26     	dat = SPI1_ReadWrite(0xFF);
000014  20ff              MOVS     r0,#0xff
000016  f7fffffe          BL       SPI1_ReadWrite
;;;27     	// do dummy read if needed (for mac and mii, see datasheet page 29)
;;;28     	if(address & 0x80)
00001a  0621              LSLS     r1,r4,#24
00001c  d502              BPL      |L7.36|
;;;29     	{
;;;30     		dat = SPI1_ReadWrite(0xFF);
00001e  20ff              MOVS     r0,#0xff
000020  f7fffffe          BL       SPI1_ReadWrite
                  |L7.36|
;;;31     	}
;;;32     	// release CS
;;;33     	ENC28J60_CSH();
000024  4901              LDR      r1,|L7.44|
000026  1f09              SUBS     r1,r1,#4
000028  600d              STR      r5,[r1,#0]
;;;34     	return dat;
;;;35     }
00002a  bd70              POP      {r4-r6,pc}
;;;36     /****************************************************************************
                          ENDP

                  |L7.44|
                          DCD      0x40010814

                          AREA ||i.enc28j60SetBank||, CODE, READONLY, ALIGN=2

                  enc28j60SetBank PROC
;;;106    ****************************************************************************/ 
;;;107    void enc28j60SetBank(unsigned char address)
000000  b570              PUSH     {r4-r6,lr}
;;;108    {
;;;109    	// set the bank (if needed)
;;;110    	if((address & BANK_MASK) != Enc28j60Bank)
000002  4e0a              LDR      r6,|L8.44|
000004  4605              MOV      r5,r0                 ;108
000006  f0000460          AND      r4,r0,#0x60
00000a  7830              LDRB     r0,[r6,#0]  ; Enc28j60Bank
00000c  4284              CMP      r4,r0
00000e  d00b              BEQ      |L8.40|
;;;111    	{
;;;112            // set the bank
;;;113            enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, (ECON1_BSEL1|ECON1_BSEL0));
000010  2203              MOVS     r2,#3
000012  211f              MOVS     r1,#0x1f
000014  20a0              MOVS     r0,#0xa0
000016  f7fffffe          BL       enc28j60WriteOp
;;;114            enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, (address & BANK_MASK)>>5);
00001a  f3c51241          UBFX     r2,r5,#5,#2
00001e  211f              MOVS     r1,#0x1f
000020  2080              MOVS     r0,#0x80
000022  f7fffffe          BL       enc28j60WriteOp
;;;115            Enc28j60Bank = (address & BANK_MASK);
000026  7034              STRB     r4,[r6,#0]
                  |L8.40|
;;;116    	}
;;;117    }
000028  bd70              POP      {r4-r6,pc}
;;;118    /****************************************************************************
                          ENDP

00002a  0000              DCW      0x0000
                  |L8.44|
                          DCD      ||.data||

                          AREA ||i.enc28j60Write||, CODE, READONLY, ALIGN=1

                  enc28j60Write PROC
;;;140    ****************************************************************************/ 
;;;141    void enc28j60Write(unsigned char address, unsigned char data)
000000  b570              PUSH     {r4-r6,lr}
;;;142    	{
000002  460c              MOV      r4,r1
000004  4605              MOV      r5,r0
;;;143    	// set the bank
;;;144    	enc28j60SetBank(address);
000006  f7fffffe          BL       enc28j60SetBank
;;;145    	// do the write
;;;146    	enc28j60WriteOp(ENC28J60_WRITE_CTRL_REG, address, data);
00000a  4622              MOV      r2,r4
00000c  4629              MOV      r1,r5
00000e  e8bd4070          POP      {r4-r6,lr}
000012  2040              MOVS     r0,#0x40
000014  f7ffbffe          B.W      enc28j60WriteOp
;;;147    	}
;;;148    /****************************************************************************
                          ENDP


                          AREA ||i.enc28j60WriteBuffer||, CODE, READONLY, ALIGN=2

                  enc28j60WriteBuffer PROC
;;;84     ****************************************************************************/ 
;;;85     void enc28j60WriteBuffer(unsigned int len, unsigned char* data)
000000  b570              PUSH     {r4-r6,lr}
;;;86     {
000002  4605              MOV      r5,r0
;;;87     	ENC28J60_CSL();
000004  4809              LDR      r0,|L10.44|
000006  2604              MOVS     r6,#4
000008  460c              MOV      r4,r1                 ;86
00000a  6006              STR      r6,[r0,#0]
;;;88     	// issue write command
;;;89     	SPI1_ReadWrite(ENC28J60_WRITE_BUF_MEM);
00000c  207a              MOVS     r0,#0x7a
00000e  f7fffffe          BL       SPI1_ReadWrite
;;;90     	
;;;91     	while(len)
000012  e004              B        |L10.30|
                  |L10.20|
;;;92     	{
;;;93     		len--;
;;;94     		SPI1_ReadWrite(*data);
000014  7820              LDRB     r0,[r4,#0]
000016  1e6d              SUBS     r5,r5,#1
000018  f7fffffe          BL       SPI1_ReadWrite
00001c  1c64              ADDS     r4,r4,#1
                  |L10.30|
00001e  2d00              CMP      r5,#0                 ;91
000020  d1f8              BNE      |L10.20|
;;;95     		data++;
;;;96     	}
;;;97     	ENC28J60_CSH();
000022  4802              LDR      r0,|L10.44|
000024  1f00              SUBS     r0,r0,#4
000026  6006              STR      r6,[r0,#0]
;;;98     }
000028  bd70              POP      {r4-r6,pc}
;;;99     /****************************************************************************
                          ENDP

00002a  0000              DCW      0x0000
                  |L10.44|
                          DCD      0x40010814

                          AREA ||i.enc28j60WriteOp||, CODE, READONLY, ALIGN=2

                  enc28j60WriteOp PROC
;;;43     ****************************************************************************/ 
;;;44     void enc28j60WriteOp(unsigned char op, unsigned char address, unsigned char data)
000000  b570              PUSH     {r4-r6,lr}
;;;45     {
000002  4615              MOV      r5,r2
;;;46     	unsigned char dat = 0;								  	  
;;;47     	ENC28J60_CSL();	                      //使能ENC28J60 SPI片选  		
000004  4a07              LDR      r2,|L11.36|
000006  2404              MOVS     r4,#4
000008  6014              STR      r4,[r2,#0]
;;;48     	dat = op | (address & ADDR_MASK);	  //OP--3位操作码 (address & ADDR_MASK)--5位参数
00000a  f001011f          AND      r1,r1,#0x1f
00000e  4308              ORRS     r0,r0,r1
;;;49     	SPI1_ReadWrite(dat);				  //SPI1 写
000010  f7fffffe          BL       SPI1_ReadWrite
;;;50     	dat = data;
000014  4628              MOV      r0,r5
;;;51     	SPI1_ReadWrite(dat);				  //SPI1 写操作数据
000016  f7fffffe          BL       SPI1_ReadWrite
;;;52     	ENC28J60_CSH();						  //禁止ENC28J60 SPI片选  完成操作
00001a  4802              LDR      r0,|L11.36|
00001c  1f00              SUBS     r0,r0,#4
00001e  6004              STR      r4,[r0,#0]
;;;53     }
000020  bd70              POP      {r4-r6,pc}
;;;54     /****************************************************************************
                          ENDP

000022  0000              DCW      0x0000
                  |L11.36|
                          DCD      0x40010814

                          AREA ||i.enc28j60clkout||, CODE, READONLY, ALIGN=1

                  enc28j60clkout PROC
;;;173    ****************************************************************************/ 
;;;174    void enc28j60clkout(unsigned char clk)
000000  f0000107          AND      r1,r0,#7
;;;175    {
;;;176        //setup clkout: 2 is 12.5MHz:
;;;177    	enc28j60Write(ECOCON, clk & 0x7);
000004  2075              MOVS     r0,#0x75
000006  f7ffbffe          B.W      enc28j60Write
;;;178    }
;;;179    /****************************************************************************
                          ENDP


                          AREA ||i.enc28j60getrev||, CODE, READONLY, ALIGN=1

                  enc28j60getrev PROC
;;;380    ****************************************************************************/ 
;;;381    unsigned char enc28j60getrev(void)
000000  2072              MOVS     r0,#0x72
;;;382    {
;;;383    	//在EREVID 内也存储了版本信息。 EREVID 是一个只读控
;;;384    	//制寄存器，包含一个5 位标识符，用来标识器件特定硅片
;;;385    	//的版本号
;;;386    	return(enc28j60Read(EREVID));
000002  f7ffbffe          B.W      enc28j60Read
;;;387    }
;;;388    
                          ENDP


                          AREA ||i.mymacinit||, CODE, READONLY, ALIGN=1

                  mymacinit PROC
;;;491    
;;;492    void mymacinit(unsigned char *mymac)
000000  b510              PUSH     {r4,lr}
;;;493    {
;;;494        enc28j60Init(mymac);
000002  f7fffffe          BL       enc28j60Init
;;;495      	enc28j60PhyWrite(PHLCON,0x0476);	
000006  f2404176          MOV      r1,#0x476
00000a  2014              MOVS     r0,#0x14
00000c  f7fffffe          BL       enc28j60PhyWrite
;;;496    	enc28j60clkout(2);                 // change clkout from 6.25MHz to 12.5MHz
000010  e8bd4010          POP      {r4,lr}
000014  2002              MOVS     r0,#2
000016  f7ffbffe          B.W      enc28j60clkout
;;;497    }
;;;498    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  Enc28j60Bank
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  NextPacketPtr
                          DCD      0x00000000
