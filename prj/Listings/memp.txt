; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\memp.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\memp.d --cpu=Cortex-M3 --apcs=interwork --diag_suppress=9931 -I..\app -I..\board -I..\cmsis -I..\lwip\src -I..\lwip\src\api -I..\lwip\src\arch -I..\lwip\src\core -I..\lwip\src\core\snmp -I..\lwip\src\include -I..\lwip\src\include\lwip -I..\lwip\src\include\ipv4 -I..\lwip\src\include\ipv4\lwip -I..\lwip\src\include\posix -I..\lwip\src\include\posix\sys -I..\lwip\src\netif -I..\lwip\src\netif\ppp -I..\stm_lib\inc -I..\stm_lib\src -I.\RTE\_lwip -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=523 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\memp.crf ..\lwip\src\core\memp.c]
                          THUMB

                          AREA ||i.memp_free||, CODE, READONLY, ALIGN=2

                  memp_free PROC
;;;434    void
;;;435    memp_free(memp_t type, void *mem)
000000  b510              PUSH     {r4,lr}
;;;436    {
000002  2900              CMP      r1,#0
000004  d012              BEQ      |L1.44|
;;;437      struct memp *memp;
;;;438      SYS_ARCH_DECL_PROTECT(old_level);
;;;439    
;;;440      if (mem == NULL) {
;;;441        return;
;;;442      }
;;;443      LWIP_ASSERT("memp_free: mem properly aligned",
000006  078a              LSLS     r2,r1,#30
000008  d003              BEQ      |L1.18|
00000a  a009              ADR      r0,|L1.48|
00000c  f7fffffe          BL       __2printf
                  |L1.16|
000010  e7fe              B        |L1.16|
                  |L1.18|
;;;444                    ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);
;;;445    
;;;446      memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
;;;447    
;;;448      SYS_ARCH_PROTECT(old_level);
;;;449    #if MEMP_OVERFLOW_CHECK
;;;450    #if MEMP_OVERFLOW_CHECK >= 2
;;;451      memp_overflow_check_all();
;;;452    #else
;;;453      memp_overflow_check_element_overflow(memp, type);
;;;454      memp_overflow_check_element_underflow(memp, type);
;;;455    #endif /* MEMP_OVERFLOW_CHECK >= 2 */
;;;456    #endif /* MEMP_OVERFLOW_CHECK */
;;;457    
;;;458      MEMP_STATS_DEC(used, type); 
000012  4a0f              LDR      r2,|L1.80|
000014  eb021200          ADD      r2,r2,r0,LSL #4
000018  f8323fbe          LDRH     r3,[r2,#0xbe]!
00001c  1e5b              SUBS     r3,r3,#1
00001e  8013              STRH     r3,[r2,#0]
;;;459      
;;;460      memp->next = memp_tab[type]; 
000020  4a0c              LDR      r2,|L1.84|
000022  f8523020          LDR      r3,[r2,r0,LSL #2]
;;;461      memp_tab[type] = memp;
000026  600b              STR      r3,[r1,#0]
000028  f8421020          STR      r1,[r2,r0,LSL #2]
                  |L1.44|
;;;462    
;;;463    #if MEMP_SANITY_CHECK
;;;464      LWIP_ASSERT("memp sanity", memp_sanity());
;;;465    #endif /* MEMP_SANITY_CHECK */
;;;466    
;;;467      SYS_ARCH_UNPROTECT(old_level);
;;;468    }
00002c  bd10              POP      {r4,pc}
;;;469    
                          ENDP

00002e  0000              DCW      0x0000
                  |L1.48|
000030  6d656d70          DCB      "memp_free: mem properly aligned",0
000034  5f667265
000038  653a206d
00003c  656d2070
000040  726f7065
000044  726c7920
000048  616c6967
00004c  6e656400
                  |L1.80|
                          DCD      lwip_stats
                  |L1.84|
                          DCD      ||.bss||

                          AREA ||i.memp_init||, CODE, READONLY, ALIGN=2

                  memp_init PROC
;;;337    void
;;;338    memp_init(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;339    {
;;;340      struct memp *memp;
;;;341      u16_t i, j;
;;;342    
;;;343      for (i = 0; i < MEMP_MAX; ++i) {
000002  2000              MOVS     r0,#0
;;;344        MEMP_STATS_AVAIL(used, i, 0);
000004  4a18              LDR      r2,|L2.104|
;;;345        MEMP_STATS_AVAIL(max, i, 0);
;;;346        MEMP_STATS_AVAIL(err, i, 0);
;;;347        MEMP_STATS_AVAIL(avail, i, memp_num[i]);
000006  4d19              LDR      r5,|L2.108|
000008  4607              MOV      r7,r0                 ;344
                  |L2.10|
00000a  eb021100          ADD      r1,r2,r0,LSL #4       ;344
00000e  f8a170be          STRH     r7,[r1,#0xbe]         ;344
000012  f8a170c0          STRH     r7,[r1,#0xc0]         ;345
000016  f8a170c2          STRH     r7,[r1,#0xc2]         ;346
00001a  f8353010          LDRH     r3,[r5,r0,LSL #1]
00001e  1c40              ADDS     r0,r0,#1
000020  b280              UXTH     r0,r0                 ;343
000022  f8a130bc          STRH     r3,[r1,#0xbc]
000026  280a              CMP      r0,#0xa               ;343
000028  d3ef              BCC      |L2.10|
;;;348      }
;;;349    
;;;350    #if !MEMP_SEPARATE_POOLS
;;;351      memp = (struct memp *)LWIP_MEM_ALIGN(memp_memory);
00002a  4811              LDR      r0,|L2.112|
;;;352    #endif /* !MEMP_SEPARATE_POOLS */
;;;353      /* for every pool: */
;;;354      for (i = 0; i < MEMP_MAX; ++i) {
;;;355        memp_tab[i] = NULL;
00002c  4c10              LDR      r4,|L2.112|
00002e  f0200103          BIC      r1,r0,#3              ;351
;;;356    #if MEMP_SEPARATE_POOLS
;;;357        memp = (struct memp*)memp_bases[i];
;;;358    #endif /* MEMP_SEPARATE_POOLS */
;;;359        /* create a linked list of memp elements */
;;;360        for (j = 0; j < memp_num[i]; ++j) {
;;;361          memp->next = memp_tab[i];
;;;362          memp_tab[i] = memp;
;;;363          memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + memp_sizes[i]
000032  4e0e              LDR      r6,|L2.108|
000034  2000              MOVS     r0,#0                 ;354
000036  3c2b              SUBS     r4,r4,#0x2b           ;355
000038  3e14              SUBS     r6,r6,#0x14
                  |L2.58|
00003a  f8447020          STR      r7,[r4,r0,LSL #2]     ;355
00003e  2200              MOVS     r2,#0                 ;360
000040  e009              B        |L2.86|
                  |L2.66|
000042  f8543020          LDR      r3,[r4,r0,LSL #2]     ;361
000046  600b              STR      r3,[r1,#0]            ;362
000048  f8441020          STR      r1,[r4,r0,LSL #2]     ;362
00004c  f8363010          LDRH     r3,[r6,r0,LSL #1]
000050  1c52              ADDS     r2,r2,#1
000052  4419              ADD      r1,r1,r3
000054  b292              UXTH     r2,r2                 ;360
                  |L2.86|
000056  f8353010          LDRH     r3,[r5,r0,LSL #1]     ;360
00005a  4293              CMP      r3,r2                 ;360
00005c  d8f1              BHI      |L2.66|
00005e  1c40              ADDS     r0,r0,#1              ;360
000060  b280              UXTH     r0,r0                 ;354
000062  280a              CMP      r0,#0xa               ;354
000064  d3e9              BCC      |L2.58|
;;;364    #if MEMP_OVERFLOW_CHECK
;;;365            + MEMP_SANITY_REGION_AFTER_ALIGNED
;;;366    #endif
;;;367          );
;;;368        }
;;;369      }
;;;370    #if MEMP_OVERFLOW_CHECK
;;;371      memp_overflow_init();
;;;372      /* check everything a first time to see if it worked */
;;;373      memp_overflow_check_all();
;;;374    #endif /* MEMP_OVERFLOW_CHECK */
;;;375    }
000066  bdf0              POP      {r4-r7,pc}
;;;376    
                          ENDP

                  |L2.104|
                          DCD      lwip_stats
                  |L2.108|
                          DCD      ||.constdata||+0x14
                  |L2.112|
                          DCD      ||.bss||+0x2b

                          AREA ||i.memp_malloc||, CODE, READONLY, ALIGN=2

                  memp_malloc PROC
;;;389    #if !MEMP_OVERFLOW_CHECK
;;;390    memp_malloc(memp_t type)
000000  b510              PUSH     {r4,lr}
;;;391    #else
;;;392    memp_malloc_fn(memp_t type, const char* file, const int line)
;;;393    #endif
;;;394    {
000002  4602              MOV      r2,r0
;;;395      struct memp *memp;
;;;396      SYS_ARCH_DECL_PROTECT(old_level);
;;;397     
;;;398      LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
000004  280a              CMP      r0,#0xa
000006  d304              BCC      |L3.18|
000008  a012              ADR      r0,|L3.84|
00000a  f7fffffe          BL       __2printf
00000e  2000              MOVS     r0,#0
                  |L3.16|
;;;399    
;;;400      SYS_ARCH_PROTECT(old_level);
;;;401    #if MEMP_OVERFLOW_CHECK >= 2
;;;402      memp_overflow_check_all();
;;;403    #endif /* MEMP_OVERFLOW_CHECK >= 2 */
;;;404    
;;;405      memp = memp_tab[type];
;;;406      
;;;407      if (memp != NULL) {
;;;408        memp_tab[type] = memp->next;
;;;409    #if MEMP_OVERFLOW_CHECK
;;;410        memp->next = NULL;
;;;411        memp->file = file;
;;;412        memp->line = line;
;;;413    #endif /* MEMP_OVERFLOW_CHECK */
;;;414        MEMP_STATS_INC_USED(used, type);
;;;415        LWIP_ASSERT("memp_malloc: memp properly aligned",
;;;416                    ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
;;;417        memp = (struct memp*)(void *)((u8_t*)memp + MEMP_SIZE);
;;;418      } else {
;;;419        LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", memp_desc[type]));
;;;420        MEMP_STATS_INC(err, type);
;;;421      }
;;;422    
;;;423      SYS_ARCH_UNPROTECT(old_level);
;;;424    
;;;425      return memp;
;;;426    }
000010  bd10              POP      {r4,pc}
                  |L3.18|
000012  4b18              LDR      r3,|L3.116|
000014  4918              LDR      r1,|L3.120|
000016  f8530022          LDR      r0,[r3,r2,LSL #2]     ;405
00001a  eb011102          ADD      r1,r1,r2,LSL #4       ;414
00001e  b1a0              CBZ      r0,|L3.74|
000020  6804              LDR      r4,[r0,#0]            ;408
000022  f8434022          STR      r4,[r3,r2,LSL #2]     ;408
000026  f8b120be          LDRH     r2,[r1,#0xbe]         ;414
00002a  1c52              ADDS     r2,r2,#1              ;414
00002c  b292              UXTH     r2,r2                 ;414
00002e  f8a120be          STRH     r2,[r1,#0xbe]         ;414
000032  f8b130c0          LDRH     r3,[r1,#0xc0]         ;414
000036  4293              CMP      r3,r2                 ;414
000038  d201              BCS      |L3.62|
00003a  f8a120c0          STRH     r2,[r1,#0xc0]         ;414
                  |L3.62|
00003e  0781              LSLS     r1,r0,#30             ;415
000040  d0e6              BEQ      |L3.16|
000042  a00e              ADR      r0,|L3.124|
000044  f7fffffe          BL       __2printf
                  |L3.72|
000048  e7fe              B        |L3.72|
                  |L3.74|
00004a  f8312fc2          LDRH     r2,[r1,#0xc2]!        ;420
00004e  1c52              ADDS     r2,r2,#1              ;420
000050  800a              STRH     r2,[r1,#0]            ;420
000052  bd10              POP      {r4,pc}
;;;427    
                          ENDP

                  |L3.84|
000054  6d656d70          DCB      "memp_malloc: type < MEMP_MAX",0
000058  5f6d616c
00005c  6c6f633a
000060  20747970
000064  65203c20
000068  4d454d50
00006c  5f4d4158
000070  00      
000071  00                DCB      0
000072  00                DCB      0
000073  00                DCB      0
                  |L3.116|
                          DCD      ||.bss||
                  |L3.120|
                          DCD      lwip_stats
                  |L3.124|
00007c  6d656d70          DCB      "memp_malloc: memp properly aligned",0
000080  5f6d616c
000084  6c6f633a
000088  206d656d
00008c  70207072
000090  6f706572
000094  6c792061
000098  6c69676e
00009c  656400  
00009f  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  memp_tab
                          %        40
                  memp_memory
                          %        19523

                          AREA ||.constdata||, DATA, READONLY, ALIGN=1

                  memp_sizes
000000  001c0020          DCW      0x001c,0x0020
000004  0098001c          DCW      0x0098,0x001c
000008  00140020          DCW      0x0014,0x0020
00000c  00180010          DCW      0x0018,0x0010
000010  00100430          DCW      0x0010,0x0430
                  memp_num
000014  00040004          DCW      0x0004,0x0004
000018  00050008          DCW      0x0005,0x0008
00001c  00100005          DCW      0x0010,0x0005
000020  000f0003          DCW      0x000f,0x0003
000024  00100010          DCW      0x0010,0x0010

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  5241575f          DCB      "RAW_PCB",0
000004  50434200
000008  5544505f          DCB      "UDP_PCB",0
00000c  50434200
000010  5443505f          DCB      "TCP_PCB",0
000014  50434200
000018  5443505f          DCB      "TCP_PCB_LISTEN",0
00001c  5043425f
000020  4c495354
000024  454e00  
000027  00                DCB      0
000028  5443505f          DCB      "TCP_SEG",0
00002c  53454700
000030  52454153          DCB      "REASSDATA",0
000034  53444154
000038  4100    
00003a  00                DCB      0
00003b  00                DCB      0
00003c  46524147          DCB      "FRAG_PBUF",0
000040  5f504255
000044  4600    
000046  00                DCB      0
000047  00                DCB      0
000048  5359535f          DCB      "SYS_TIMEOUT",0
00004c  54494d45
000050  4f555400
000054  50425546          DCB      "PBUF_REF/ROM",0
000058  5f524546
00005c  2f524f4d
000060  00      
000061  00                DCB      0
000062  00                DCB      0
000063  00                DCB      0
000064  50425546          DCB      "PBUF_POOL",0
000068  5f504f4f
00006c  4c00    

                          AREA ||.data||, DATA, ALIGN=2

                  memp_desc
                          DCD      ||.conststring||
                          DCD      ||.conststring||+0x8
                          DCD      ||.conststring||+0x10
                          DCD      ||.conststring||+0x18
                          DCD      ||.conststring||+0x28
                          DCD      ||.conststring||+0x30
                          DCD      ||.conststring||+0x3c
                          DCD      ||.conststring||+0x48
                          DCD      ||.conststring||+0x54
                          DCD      ||.conststring||+0x64
