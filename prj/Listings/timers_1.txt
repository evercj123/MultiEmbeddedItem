; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\timers_1.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\timers_1.d --cpu=Cortex-M3 --apcs=interwork --diag_suppress=9931 -I..\app -I..\board -I..\cmsis -I..\lwip\src -I..\lwip\src\api -I..\lwip\src\arch -I..\lwip\src\core -I..\lwip\src\core\snmp -I..\lwip\src\include -I..\lwip\src\include\lwip -I..\lwip\src\include\ipv4 -I..\lwip\src\include\ipv4\lwip -I..\lwip\src\include\posix -I..\lwip\src\include\posix\sys -I..\lwip\src\netif -I..\lwip\src\netif\ppp -I..\stm_lib\inc -I..\stm_lib\src -I.\RTE\_lwip -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=523 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\timers_1.crf ..\lwip\src\core\timers.c]
                          THUMB

                          AREA ||i.arp_timer||, CODE, READONLY, ALIGN=2

                  arp_timer PROC
;;;134    static void
;;;135    arp_timer(void *arg)
000000  b510              PUSH     {r4,lr}
;;;136    {
;;;137      LWIP_UNUSED_ARG(arg);
;;;138      LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: etharp_tmr()\n"));
;;;139      etharp_tmr();
000002  f7fffffe          BL       etharp_tmr
;;;140      sys_timeout(ARP_TMR_INTERVAL, arp_timer, NULL);
000006  e8bd4010          POP      {r4,lr}
00000a  2200              MOVS     r2,#0
00000c  4902              LDR      r1,|L1.24|
00000e  f2413088          MOV      r0,#0x1388
000012  f7ffbffe          B.W      sys_timeout
;;;141    }
;;;142    #endif /* LWIP_ARP */
                          ENDP

000016  0000              DCW      0x0000
                  |L1.24|
                          DCD      arp_timer

                          AREA ||i.ip_reass_timer||, CODE, READONLY, ALIGN=2

                  ip_reass_timer PROC
;;;118    static void
;;;119    ip_reass_timer(void *arg)
000000  b510              PUSH     {r4,lr}
;;;120    {
;;;121      LWIP_UNUSED_ARG(arg);
;;;122      LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: ip_reass_tmr()\n"));
;;;123      ip_reass_tmr();
000002  f7fffffe          BL       ip_reass_tmr
;;;124      sys_timeout(IP_TMR_INTERVAL, ip_reass_timer, NULL);
000006  e8bd4010          POP      {r4,lr}
00000a  2200              MOVS     r2,#0
00000c  4902              LDR      r1,|L2.24|
00000e  f44f707a          MOV      r0,#0x3e8
000012  f7ffbffe          B.W      sys_timeout
;;;125    }
;;;126    #endif /* IP_REASSEMBLY */
                          ENDP

000016  0000              DCW      0x0000
                  |L2.24|
                          DCD      ip_reass_timer

                          AREA ||i.sys_check_timeouts||, CODE, READONLY, ALIGN=2

                  sys_check_timeouts PROC
;;;357    void
;;;358    sys_check_timeouts(void)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;359    {
;;;360      if (next_timeout) {
000004  4d14              LDR      r5,|L3.88|
000006  6828              LDR      r0,[r5,#0]            ;359  ; next_timeout
000008  2800              CMP      r0,#0                 ;359
00000a  d023              BEQ      |L3.84|
;;;361        struct sys_timeo *tmptimeout;
;;;362        u32_t diff;
;;;363        sys_timeout_handler handler;
;;;364        void *arg;
;;;365        u8_t had_one;
;;;366        u32_t now;
;;;367    
;;;368        now = sys_now();
00000c  f7fffffe          BL       sys_now
000010  4606              MOV      r6,r0
;;;369        /* this cares for wraparounds */
;;;370        diff = now - timeouts_last_time;
000012  6868              LDR      r0,[r5,#4]  ; timeouts_last_time
;;;371        do
;;;372        {
;;;373    #if PBUF_POOL_FREE_OOSEQ
;;;374          PBUF_CHECK_FREE_OOSEQ();
000014  f8df9044          LDR      r9,|L3.92|
000018  1a34              SUBS     r4,r6,r0              ;370
00001a  46a8              MOV      r8,r5                 ;360
                  |L3.28|
00001c  f8990000          LDRB     r0,[r9,#0]  ; pbuf_free_ooseq_pending
000020  b108              CBZ      r0,|L3.38|
000022  f7fffffe          BL       pbuf_free_ooseq
                  |L3.38|
;;;375    #endif /* PBUF_POOL_FREE_OOSEQ */
;;;376          had_one = 0;
;;;377          tmptimeout = next_timeout;
;;;378          if (tmptimeout && (tmptimeout->time <= diff)) {
000026  f8d81000          LDR      r1,[r8,#0]  ; next_timeout
00002a  4642              MOV      r2,r8                 ;377
00002c  2900              CMP      r1,#0
00002e  d011              BEQ      |L3.84|
000030  6848              LDR      r0,[r1,#4]
000032  42a0              CMP      r0,r4
000034  d80e              BHI      |L3.84|
;;;379            /* timeout has expired */
;;;380            had_one = 1;
;;;381            timeouts_last_time = now;
;;;382            diff -= tmptimeout->time;
000036  1a24              SUBS     r4,r4,r0
;;;383            next_timeout = tmptimeout->next;
000038  6056              STR      r6,[r2,#4]  ; timeouts_last_time
00003a  6808              LDR      r0,[r1,#0]
;;;384            handler = tmptimeout->h;
;;;385            arg = tmptimeout->arg;
;;;386    #if LWIP_DEBUG_TIMERNAMES
;;;387            if (handler != NULL) {
;;;388              LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
;;;389                tmptimeout->handler_name, arg));
;;;390            }
;;;391    #endif /* LWIP_DEBUG_TIMERNAMES */
;;;392            memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
00003c  f8c80000          STR      r0,[r8,#0]  ; next_timeout
000040  e9d15702          LDRD     r5,r7,[r1,#8]
000044  2007              MOVS     r0,#7
000046  f7fffffe          BL       memp_free
;;;393            if (handler != NULL) {
00004a  2d00              CMP      r5,#0
00004c  d0e6              BEQ      |L3.28|
;;;394              handler(arg);
00004e  4638              MOV      r0,r7
000050  47a8              BLX      r5
000052  e7e3              B        |L3.28|
                  |L3.84|
;;;395            }
;;;396          }
;;;397        /* repeat until all expired timers have been called */
;;;398        }while(had_one);
;;;399      }
;;;400    }
000054  e8bd87f0          POP      {r4-r10,pc}
;;;401    
                          ENDP

                  |L3.88|
                          DCD      ||.data||
                  |L3.92|
                          DCD      pbuf_free_ooseq_pending

                          AREA ||i.sys_restart_timeouts||, CODE, READONLY, ALIGN=2

                  sys_restart_timeouts PROC
;;;407    void
;;;408    sys_restart_timeouts(void)
000000  b510              PUSH     {r4,lr}
;;;409    {
;;;410      timeouts_last_time = sys_now();
000002  f7fffffe          BL       sys_now
000006  4901              LDR      r1,|L4.12|
000008  6048              STR      r0,[r1,#4]  ; timeouts_last_time
;;;411    }
00000a  bd10              POP      {r4,pc}
;;;412    
                          ENDP

                  |L4.12|
                          DCD      ||.data||

                          AREA ||i.sys_timeout||, CODE, READONLY, ALIGN=2

                  sys_timeout PROC
;;;265    void
;;;266    sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
000000  b570              PUSH     {r4-r6,lr}
;;;267    #endif /* LWIP_DEBUG_TIMERNAMES */
;;;268    {
000002  4604              MOV      r4,r0
000004  4615              MOV      r5,r2
000006  460e              MOV      r6,r1
;;;269      struct sys_timeo *timeout, *t;
;;;270    
;;;271      timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
000008  2007              MOVS     r0,#7
00000a  f7fffffe          BL       memp_malloc
;;;272      if (timeout == NULL) {
00000e  b170              CBZ      r0,|L5.46|
;;;273        LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
;;;274        return;
;;;275      }
;;;276      timeout->next = NULL;
000010  2100              MOVS     r1,#0
;;;277      timeout->h = handler;
;;;278      timeout->arg = arg;
;;;279      timeout->time = msecs;
;;;280    #if LWIP_DEBUG_TIMERNAMES
;;;281      timeout->handler_name = handler_name;
;;;282      LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
;;;283        (void *)timeout, msecs, handler_name, (void *)arg));
;;;284    #endif /* LWIP_DEBUG_TIMERNAMES */
;;;285    
;;;286      if (next_timeout == NULL) {
000012  60c5              STR      r5,[r0,#0xc]
000014  4b12              LDR      r3,|L5.96|
000016  e8800052          STM      r0,{r1,r4,r6}
00001a  6819              LDR      r1,[r3,#0]  ; next_timeout
00001c  b129              CBZ      r1,|L5.42|
;;;287        next_timeout = timeout;
;;;288        return;
;;;289      }
;;;290    
;;;291      if (next_timeout->time > msecs) {
00001e  684a              LDR      r2,[r1,#4]
000020  42a2              CMP      r2,r4
000022  d914              BLS      |L5.78|
;;;292        next_timeout->time -= msecs;
000024  1b12              SUBS     r2,r2,r4
;;;293        timeout->next = next_timeout;
000026  604a              STR      r2,[r1,#4]
000028  6001              STR      r1,[r0,#0]
                  |L5.42|
00002a  6018              STR      r0,[r3,#0]            ;288  ; next_timeout
;;;294        next_timeout = timeout;
;;;295      } else {
;;;296        for(t = next_timeout; t != NULL; t = t->next) {
;;;297          timeout->time -= t->time;
;;;298          if (t->next == NULL || t->next->time > timeout->time) {
;;;299            if (t->next != NULL) {
;;;300              t->next->time -= timeout->time;
;;;301            }
;;;302            timeout->next = t->next;
;;;303            t->next = timeout;
;;;304            break;
;;;305          }
;;;306        }
;;;307      }
;;;308    }
00002c  bd70              POP      {r4-r6,pc}
                  |L5.46|
00002e  a00d              ADR      r0,|L5.100|
000030  f7fffffe          BL       __2printf
                  |L5.52|
000034  e7fe              B        |L5.52|
                  |L5.54|
000036  6854              LDR      r4,[r2,#4]            ;298
000038  429c              CMP      r4,r3                 ;298
00003a  d907              BLS      |L5.76|
00003c  6853              LDR      r3,[r2,#4]            ;300
00003e  6844              LDR      r4,[r0,#4]            ;300
000040  1b1b              SUBS     r3,r3,r4              ;300
000042  6053              STR      r3,[r2,#4]            ;300
                  |L5.68|
000044  680a              LDR      r2,[r1,#0]            ;302
000046  6002              STR      r2,[r0,#0]            ;303
000048  6008              STR      r0,[r1,#0]            ;304
00004a  bd70              POP      {r4-r6,pc}
                  |L5.76|
00004c  4611              MOV      r1,r2
                  |L5.78|
00004e  6842              LDR      r2,[r0,#4]            ;297
000050  684b              LDR      r3,[r1,#4]            ;297
000052  1ad3              SUBS     r3,r2,r3              ;297
000054  6043              STR      r3,[r0,#4]            ;298
000056  680a              LDR      r2,[r1,#0]            ;296
000058  2a00              CMP      r2,#0                 ;296
00005a  d0f3              BEQ      |L5.68|
00005c  e7eb              B        |L5.54|
;;;309    
                          ENDP

00005e  0000              DCW      0x0000
                  |L5.96|
                          DCD      ||.data||
                  |L5.100|
000064  7379735f          DCB      "sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is "
000068  74696d65
00006c  6f75743a
000070  2074696d
000074  656f7574
000078  20213d20
00007c  4e554c4c
000080  2c20706f
000084  6f6c204d
000088  454d505f
00008c  5359535f
000090  54494d45
000094  4f555420
000098  697320  
00009b  656d7074          DCB      "empty",0
00009f  7900    
0000a1  00                DCB      0
0000a2  00                DCB      0
0000a3  00                DCB      0

                          AREA ||i.sys_timeouts_init||, CODE, READONLY, ALIGN=2

                  sys_timeouts_init PROC
;;;222    /** Initialize this module */
;;;223    void sys_timeouts_init(void)
000000  b510              PUSH     {r4,lr}
;;;224    {
;;;225    #if IP_REASSEMBLY
;;;226      sys_timeout(IP_TMR_INTERVAL, ip_reass_timer, NULL);
000002  2200              MOVS     r2,#0
000004  4907              LDR      r1,|L6.36|
000006  f44f707a          MOV      r0,#0x3e8
00000a  f7fffffe          BL       sys_timeout
;;;227    #endif /* IP_REASSEMBLY */
;;;228    #if LWIP_ARP
;;;229      sys_timeout(ARP_TMR_INTERVAL, arp_timer, NULL);
00000e  2200              MOVS     r2,#0
000010  4905              LDR      r1,|L6.40|
000012  f2413088          MOV      r0,#0x1388
000016  f7fffffe          BL       sys_timeout
;;;230    #endif /* LWIP_ARP */
;;;231    #if LWIP_DHCP
;;;232      sys_timeout(DHCP_COARSE_TIMER_MSECS, dhcp_timer_coarse, NULL);
;;;233      sys_timeout(DHCP_FINE_TIMER_MSECS, dhcp_timer_fine, NULL);
;;;234    #endif /* LWIP_DHCP */
;;;235    #if LWIP_AUTOIP
;;;236      sys_timeout(AUTOIP_TMR_INTERVAL, autoip_timer, NULL);
;;;237    #endif /* LWIP_AUTOIP */
;;;238    #if LWIP_IGMP
;;;239      sys_timeout(IGMP_TMR_INTERVAL, igmp_timer, NULL);
;;;240    #endif /* LWIP_IGMP */
;;;241    #if LWIP_DNS
;;;242      sys_timeout(DNS_TMR_INTERVAL, dns_timer, NULL);
;;;243    #endif /* LWIP_DNS */
;;;244    
;;;245    #if NO_SYS
;;;246      /* Initialise timestamp for sys_check_timeouts */
;;;247      timeouts_last_time = sys_now();
00001a  f7fffffe          BL       sys_now
00001e  4903              LDR      r1,|L6.44|
000020  6048              STR      r0,[r1,#4]  ; timeouts_last_time
;;;248    #endif
;;;249    }
000022  bd10              POP      {r4,pc}
;;;250    
                          ENDP

                  |L6.36|
                          DCD      ip_reass_timer
                  |L6.40|
                          DCD      arp_timer
                  |L6.44|
                          DCD      ||.data||

                          AREA ||i.sys_untimeout||, CODE, READONLY, ALIGN=2

                  sys_untimeout PROC
;;;320    void
;;;321    sys_untimeout(sys_timeout_handler handler, void *arg)
000000  b430              PUSH     {r4,r5}
;;;322    {
;;;323      struct sys_timeo *prev_t, *t;
;;;324    
;;;325      if (next_timeout == NULL) {
000002  4c10              LDR      r4,|L7.68|
000004  460b              MOV      r3,r1                 ;322
000006  6821              LDR      r1,[r4,#0]            ;322  ; next_timeout
000008  2900              CMP      r1,#0                 ;322
00000a  d019              BEQ      |L7.64|
;;;326        return;
;;;327      }
;;;328    
;;;329      for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
00000c  2200              MOVS     r2,#0
                  |L7.14|
;;;330        if ((t->h == handler) && (t->arg == arg)) {
00000e  688d              LDR      r5,[r1,#8]
000010  4285              CMP      r5,r0
000012  d111              BNE      |L7.56|
000014  68cd              LDR      r5,[r1,#0xc]
000016  429d              CMP      r5,r3
000018  d10e              BNE      |L7.56|
;;;331          /* We have a match */
;;;332          /* Unlink from previous in list */
;;;333          if (prev_t == NULL) {
00001a  6808              LDR      r0,[r1,#0]
00001c  b152              CBZ      r2,|L7.52|
;;;334            next_timeout = t->next;
;;;335          } else {
;;;336            prev_t->next = t->next;
00001e  6010              STR      r0,[r2,#0]
                  |L7.32|
;;;337          }
;;;338          /* If not the last one, add time of this one back to next */
;;;339          if (t->next != NULL) {
000020  6808              LDR      r0,[r1,#0]
000022  b118              CBZ      r0,|L7.44|
;;;340            t->next->time += t->time;
000024  6842              LDR      r2,[r0,#4]
000026  684b              LDR      r3,[r1,#4]
000028  441a              ADD      r2,r2,r3
00002a  6042              STR      r2,[r0,#4]
                  |L7.44|
;;;341          }
;;;342          memp_free(MEMP_SYS_TIMEOUT, t);
00002c  bc30              POP      {r4,r5}
00002e  2007              MOVS     r0,#7
000030  f7ffbffe          B.W      memp_free
                  |L7.52|
000034  6020              STR      r0,[r4,#0]            ;334  ; next_timeout
000036  e7f3              B        |L7.32|
                  |L7.56|
000038  460a              MOV      r2,r1                 ;329
00003a  6809              LDR      r1,[r1,#0]            ;329
00003c  2900              CMP      r1,#0                 ;329
00003e  d1e6              BNE      |L7.14|
                  |L7.64|
;;;343          return;
;;;344        }
;;;345      }
;;;346      return;
;;;347    }
000040  bc30              POP      {r4,r5}
000042  4770              BX       lr
;;;348    
                          ENDP

                  |L7.68|
                          DCD      ||.data||

                          AREA ||i.tcp_timer_needed||, CODE, READONLY, ALIGN=2

                  tcp_timer_needed PROC
;;;100    void
;;;101    tcp_timer_needed(void)
000000  4808              LDR      r0,|L8.36|
;;;102    {
000002  6881              LDR      r1,[r0,#8]  ; tcpip_tcp_timer_active
000004  2900              CMP      r1,#0
000006  d10c              BNE      |L8.34|
;;;103      /* timer is off but needed again? */
;;;104      if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
000008  4907              LDR      r1,|L8.40|
00000a  4a08              LDR      r2,|L8.44|
00000c  6809              LDR      r1,[r1,#0]  ; tcp_active_pcbs
00000e  6812              LDR      r2,[r2,#0]  ; tcp_tw_pcbs
000010  4311              ORRS     r1,r1,r2
000012  d006              BEQ      |L8.34|
;;;105        /* enable and start timer */
;;;106        tcpip_tcp_timer_active = 1;
000014  2101              MOVS     r1,#1
;;;107        sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
000016  6081              STR      r1,[r0,#8]  ; tcpip_tcp_timer_active
000018  2200              MOVS     r2,#0
00001a  4905              LDR      r1,|L8.48|
00001c  20fa              MOVS     r0,#0xfa
00001e  f7ffbffe          B.W      sys_timeout
                  |L8.34|
;;;108      }
;;;109    }
000022  4770              BX       lr
;;;110    #endif /* LWIP_TCP */
                          ENDP

                  |L8.36|
                          DCD      ||.data||
                  |L8.40|
                          DCD      tcp_active_pcbs
                  |L8.44|
                          DCD      tcp_tw_pcbs
                  |L8.48|
                          DCD      tcpip_tcp_timer

                          AREA ||i.tcpip_tcp_timer||, CODE, READONLY, ALIGN=2

                  tcpip_tcp_timer PROC
;;;78     static void
;;;79     tcpip_tcp_timer(void *arg)
000000  b510              PUSH     {r4,lr}
;;;80     {
;;;81       LWIP_UNUSED_ARG(arg);
;;;82     
;;;83       /* call TCP timer handler */
;;;84       tcp_tmr();
000002  f7fffffe          BL       tcp_tmr
;;;85       /* timer still needed? */
;;;86       if (tcp_active_pcbs || tcp_tw_pcbs) {
000006  4808              LDR      r0,|L9.40|
000008  4908              LDR      r1,|L9.44|
00000a  6800              LDR      r0,[r0,#0]  ; tcp_active_pcbs
00000c  6809              LDR      r1,[r1,#0]  ; tcp_tw_pcbs
00000e  4308              ORRS     r0,r0,r1
000010  d006              BEQ      |L9.32|
;;;87         /* restart timer */
;;;88         sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
000012  2200              MOVS     r2,#0
000014  e8bd4010          POP      {r4,lr}
000018  4905              LDR      r1,|L9.48|
00001a  20fa              MOVS     r0,#0xfa
00001c  f7ffbffe          B.W      sys_timeout
                  |L9.32|
;;;89       } else {
;;;90         /* disable timer */
;;;91         tcpip_tcp_timer_active = 0;
000020  4904              LDR      r1,|L9.52|
000022  2000              MOVS     r0,#0
000024  6088              STR      r0,[r1,#8]  ; tcpip_tcp_timer_active
;;;92       }
;;;93     }
000026  bd10              POP      {r4,pc}
;;;94     
                          ENDP

                  |L9.40|
                          DCD      tcp_active_pcbs
                  |L9.44|
                          DCD      tcp_tw_pcbs
                  |L9.48|
                          DCD      tcpip_tcp_timer
                  |L9.52|
                          DCD      ||.data||

                          AREA ||.data||, DATA, ALIGN=2

                  next_timeout
                          DCD      0x00000000
                  timeouts_last_time
                          DCD      0x00000000
                  tcpip_tcp_timer_active
                          DCD      0x00000000
